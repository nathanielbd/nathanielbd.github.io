<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on nathanielbd</title>
		<link>https://nathanielbd.github.io/posts/</link>
		<description>Recent content in Posts on nathanielbd</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Sun, 06 Jun 2021 16:04:16 -0500</lastBuildDate>
		<atom:link href="https://nathanielbd.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Celebrating Aleksandr Lyapunov</title>
			<link>https://nathanielbd.github.io/posts/celebrating-aleksandr-lyapunov/</link>
			<pubDate>Sun, 06 Jun 2021 16:04:16 -0500</pubDate>
			
			<guid>https://nathanielbd.github.io/posts/celebrating-aleksandr-lyapunov/</guid>
			<description>Happy 164th birthday, Aleksandr Lyapunov!    I recently participated in the first annual Manim math animation engine hackathon! The theme was aniversaries, so I created the above animation to celebrate the 164th anniversary of mathematician Aleksandr Lyapunov&amp;rsquo;s birth. This extended some ideas I presented from Steven Strogatz&amp;rsquo;s nonlinear dynamics textbook at the University of Minnesota&amp;rsquo;s math directed reading program symposium.</description>
			<content type="html"><![CDATA[<table>
<thead>
<tr>
<th align="center">
 <video controls width="80%"><source src="/Lyapunov.mp4"></video> </th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">Happy 164th birthday, Aleksandr Lyapunov!</td>
</tr>
</tbody>
</table>
<p>I recently participated in the first annual <a href="https://www.manim.community/">Manim</a> math animation engine hackathon! The theme was aniversaries, so I created the above animation to celebrate the 164th anniversary of mathematician Aleksandr Lyapunov&rsquo;s birth. This extended some ideas I presented from <a href="http://www.stevenstrogatz.com/books/nonlinear-dynamics-and-chaos-with-applications-to-physics-biology-chemistry-and-engineering">Steven Strogatz&rsquo;s nonlinear dynamics textbook</a> at the University of Minnesota&rsquo;s <a href="https://www-users.math.umn.edu/~mahrud/drp/">math directed reading program</a> symposium.</p>
<h1 id="the-math">The math</h1>
<p>Consider the system</p>
<p>$$
\begin{aligned}
\frac{dx}{dt} &amp;= y-x^3 \newline
\frac{dy}{dt} &amp;= -x-y^3.
\end{aligned}
$$</p>
<table>
<thead>
<tr>
<th align="center"><img src="/DSImage.png" alt="Our dynamical system"></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">Our dynamical system</td>
</tr>
</tbody>
</table>
<p>We can&rsquo;t use linearization about the fixed point at the origin to determine its stability; the Jacobian has pure imaginary eigenvalues, so the linearization is not robust to small nonlinear terms.</p>
<p>However, Lyapunov showed that finding a Lyapunov function \(V\) which is locally positive definite and has a locally negative definite time derivative implies stability. This is simimlar to an energy function as the trajectories move monotonically down the basis of \(V\). Let&rsquo;s try \(V = x^2 + y^2\) for the system.</p>
<table>
<thead>
<tr>
<th align="center"><img src="/ParabImage.png" alt="The chosen Lyapunov function"></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">The chosen Lyapunov function</td>
</tr>
</tbody>
</table>
<p>$$
\begin{aligned}
\frac{dV}{dt} &amp;= \frac{dV}{dx} \frac{dx}{dt} + \frac{dV}{dy} \frac{dy}{dt} \newline
&amp;= 2x(y-x^3) + 2y(-x-y^3) \newline
&amp;= 2xy -2x^4 - 2yx -2y^4 \newline
&amp;= -2x^4 - 2y^4
\end{aligned}
$$</p>
<p>\(V\) is nonnegative and \(\frac{dV}{dt}\) is nonpositive, so it truly is a Lyapunov function. Its existence implies that the system is aysmptototically stable; trajectories all eventually converge to the origin.</p>
<p>So the key insight that Lyapunov found was that there doesn&rsquo;t need to be a real energy function, nor does a system have to be physical; all you need is a Lyapunov function that satisfies a few properties to determine its stability.</p>
<p>Outside of this toy example, Lyapunov functions are used in the engineering of nonlinear control systems. Their analogue in <a href="https://en.wikipedia.org/wiki/Control-Lyapunov_function">control-Lyapunov functions</a> has been used in <a href="https://arc.aiaa.org/doi/10.2514/3.21375">robotics for path planning around obstacles</a>.</p>
]]></content>
		</item>
		
		<item>
			<title>Hacking the Normie Test</title>
			<link>https://nathanielbd.github.io/posts/hacking-the-normie-test/</link>
			<pubDate>Fri, 15 Jan 2021 13:45:56 -0600</pubDate>
			
			<guid>https://nathanielbd.github.io/posts/hacking-the-normie-test/</guid>
			<description>The Normie Test is a quiz with ~40 questions that places the taker on a two-axes plot relative to internet culture personality classes like &amp;lsquo;normies&amp;rsquo; and &amp;lsquo;simps.&amp;rsquo;
        Apparently EDM is mainstream now?    Notably, the quiz is not open source and it runs on server-side PHP. How is X calculated? How is Y calculated? Why am I a &amp;lsquo;Simp&amp;rsquo; if my X-coordinate is over the line by 0.</description>
			<content type="html"><![CDATA[<p>The Normie Test is a quiz with ~40 questions that places the taker on a two-axes plot relative to internet culture personality classes like &lsquo;normies&rsquo; and &lsquo;simps.&rsquo;</p>
<table>
<thead>
<tr>
<th align="center"><img src="https://raw.githubusercontent.com/nathanielbd/normie-neural-networks/master/ex_result.png" alt="heh normie"></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">Apparently EDM is mainstream now?</td>
</tr>
</tbody>
</table>
<p>Notably, the quiz is not open source and it runs on server-side PHP. How is X calculated? How is Y calculated? Why am I a &lsquo;Simp&rsquo; if my X-coordinate is over the line by 0.5? To answer these pressing questions, I had to reverse-engineer the Normie Test with nothing but web scraping and machine learning.</p>
<h2 id="introduction">Introduction</h2>
<p>The Normie Test&rsquo;s first 20 questions are called the &lsquo;perspective questions&rsquo; meant to determine the quiz taker&rsquo;s outlook on life.</p>
<blockquote>
<p>Do you want to be in society?</p>
</blockquote>
<p>Questions 21-34 are the &lsquo;actual&rsquo; or &lsquo;normie&rsquo; questions which supposedly determine whether or not the quiz taker is a &lsquo;normie.&rsquo;</p>
<blockquote>
<p>Has anyone ever described you as awkward, autistic, weird, etc.?</p>
</blockquote>
<p>Questions 35-41 are &lsquo;statistical.&rsquo; They ask the quiz taker their height, BMI, climate, among other things for reference.</p>
<p>The perspective questions have 5 answer options: Strongly Yes, Yes, Neutral, No, and Strongly No. The <a href="http://dulm.blue/normie/changelog.gimp">changelog</a> shows that the creator of the test, Do You Like Memes? (DULM), calls these 5-option questions &lsquo;dynamic questions.&rsquo; The normie questions have some Yes-No questions and some dynamic questions.</p>
<p>A few assumptions guided my investigation. Each answer option probably has a positive or negative score which affects the X and Y-coordinates. Then the XY-coordinates are just the sums of the scores of the quiz taker&rsquo;s answers. DULM writes the following subtitle for the statistical questions:</p>
<blockquote>
<p>Enter some numbers to see how normal you are.
<strong>WTF!!! Is this a datamine?</strong>
The next six questions will make your test results more accurate, as these statistics can determine the likelihood of being normal.</p>
</blockquote>
<p>From this, it sounds like DULM looks at the distribution of personality classes for different answers and somehow takes that into account for the final result. I assume they add a &lsquo;correction term&rsquo; to the XY-coordinates based on that distribution. This assumption is necessary since the <a href="https://raw.githubusercontent.com/nathanielbd/normie-neural-networks/master/stats.json">sparse statistical data</a> that DULM makes public does not include any XY means or covariances.</p>
<h2 id="web-scraping">Web scraping</h2>
<p>Due to the last assumption, the first round of web scraping answered the perspective and normie questions randomly while leaving the statistical questions in their default options (with the exception of answering male/female/other) and recorded the resulting XY coordinates. In order to solve for the weights, this first round needed to collect at least 146 samples (25 dynamic questions, 9 Yes-No questions, and the male/female/other question) for the system not to be <a href="https://en.wikipedia.org/wiki/Underdetermined_system">underdetermined</a>.</p>
<p>Also due to the last assumption, the second round of web scraping required a sample for each of the 14400 combinations (2 3-option questions, 3 4-option questions, and 2 5-option questions) of answers to the statistical quesitons. This time, I also recorded the resulting personality class for each sample.</p>
<p>During my investigation, DULM actually added their own captcha robot test, which made web scraping a little more difficult.</p>
<table>
<thead>
<tr>
<th align="center"><img src="/captcha.png" alt=""></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">Shoutout to fellow Golden Gopher <a href="https://www-users.cs.umn.edu/~hoppernj/">Dr. Nick Hooper</a> for co-creating CAPTCHA</td>
</tr>
</tbody>
</table>
<p>In the end, I had my <a href="https://github.com/nathanielbd/normie-neural-networks/blob/master/scrape.py">scraping script</a> prompt me to answer the CAPTCHA and quit whenever the CAPTCHA expired. It would write to the same CSV file each time and would know which combination it last wrote.</p>

 <script src="https://gist.github.com/nathanielbd/607b9eb3756e111e8d33b80d3ae4ce85.js"></script> 
<p>It was through this web scraping that I found that the X coordinate is always in increments of 0.5 and the Y coordinate is always in increments of 0.25.</p>
<h2 id="findings">Findings</h2>
<h3 id="xy-coordinates">XY coordinates</h3>
<p>Figuring out the weights toward the X and Y coordinates for each question option requires solving the system</p>
<p>$$Ax=b$$</p>
<p>where \(A\) is the matrix whose rows contain the <a href="https://en.wikipedia.org/wiki/One-hot">one-hot encoded</a> answers to the questions, \(x\) is a vector containing the weights of the answers, and \(b\) is the X or the Y coordinate. Although this can be a simple call to <code>numpy.linalg.solve</code>, I decided to solve this with linear regression. In this case, I could tell if the assumption of linear weights is wrong if there was an atrocious mean squared error.</p>
<p>After rounding to the nearest 0.5 for the X weights and to the nearest 0.25 for the Y weights, we obtain the table:</p>

 <script src="https://gist.github.com/nathanielbd/2969ed56fe1de2784433f83ac3a0b0ed.js"></script> 

 <style>
.gist .markdown-body .csv-data th, .gist .markdown-body .csv-data td, .gist .markdown-body .csv-data .blob-num {background: #000; background-color: #000;}
.gist .blob-interaction-bar .octicon-search > path {fill: #fff}
.gist .blob-interaction-bar > input {background: #000}
.gist .blob-interaction-bar {background: #000}
</style> 
<h4 id="normie-neural-networkshttpsgithubcomnathanielbdnormie-neural-networks"><a href="https://github.com/nathanielbd/normie-neural-networks">Normie Neural Networks</a></h4>
<p>Let&rsquo;s try doing the same thing, but with a single layer neural network. Just for fun.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">SingleLayerNeuralNetwork</span><span class="p">(</span><span class="n">nn</span><span class="o">.</span><span class="n">Module</span><span class="p">):</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">input_dim</span><span class="p">,</span> <span class="n">output_dim</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="fm">__init__</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">input_dim</span> <span class="o">=</span> <span class="n">input_dim</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">output_dim</span> <span class="o">=</span> <span class="n">output_dim</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">layer</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">Linear</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">input_dim</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">output_dim</span><span class="p">,</span> <span class="n">bias</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="n">out</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">layer</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">out</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">SingleLayerNeuralNetwork</span><span class="p">(</span><span class="n">answers</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">XY</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
<span class="n">optimizer</span> <span class="o">=</span> <span class="n">optim</span><span class="o">.</span><span class="n">SGD</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">parameters</span><span class="p">(),</span> <span class="n">lr</span><span class="o">=</span><span class="mf">1e-4</span><span class="p">,</span> <span class="n">momentum</span><span class="o">=</span><span class="mf">0.1</span><span class="p">)</span>
<span class="n">criterion</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">L1Loss</span><span class="p">()</span>
<span class="n">losses</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">EPOCHS</span> <span class="o">=</span> <span class="mi">10000</span>
<span class="k">for</span> <span class="n">epoch</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">EPOCHS</span><span class="p">):</span>
    <span class="n">loss</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">ans</span><span class="p">,</span> <span class="n">res</span> <span class="ow">in</span> <span class="n">train_loader</span><span class="p">:</span>
        <span class="n">ans</span><span class="p">,</span> <span class="n">res</span> <span class="o">=</span> <span class="n">ans</span><span class="o">.</span><span class="n">float</span><span class="p">(),</span> <span class="n">res</span><span class="o">.</span><span class="n">float</span><span class="p">()</span>
        <span class="n">optimizer</span><span class="o">.</span><span class="n">zero_grad</span><span class="p">()</span>
        <span class="n">pred_res</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">ans</span><span class="p">)</span>
        <span class="n">train_loss</span> <span class="o">=</span> <span class="n">criterion</span><span class="p">(</span><span class="n">pred_res</span><span class="p">,</span> <span class="n">res</span><span class="p">)</span>
        <span class="n">train_loss</span><span class="o">.</span><span class="n">backward</span><span class="p">()</span>
        <span class="n">optimizer</span><span class="o">.</span><span class="n">step</span><span class="p">()</span>
        <span class="n">loss</span> <span class="o">+=</span> <span class="n">train_loss</span><span class="o">.</span><span class="n">item</span><span class="p">()</span>
    <span class="n">losses</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">loss</span><span class="p">)</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">epoch</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="mi">100</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s1">&#39;epoch: {epoch+1}/{EPOCHS}, loss: {loss}&#39;</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">loss</span> <span class="o">&lt;=</span> <span class="mf">0.5</span><span class="p">:</span>
        <span class="k">break</span>
</code></pre></div><p>This is probably the most explainable neural net possible. It&rsquo;s simply optimizing</p>
<p>$$\min_x \left\lVert Ax-b \right\rVert_1$$</p>
<p>and the parameters of the model can actually be interpreted! They are the weights of the answers towards the X and Y coordinates.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">params</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">parameters</span><span class="p">())</span>

<span class="n">x_weights</span> <span class="o">=</span> <span class="n">params</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">detach</span><span class="p">()</span>
<span class="n">columns</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">get_dummies</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">data</span><span class="o">.</span><span class="n">columns</span><span class="p">[:</span><span class="o">-</span><span class="mi">2</span><span class="p">]])</span><span class="o">.</span><span class="n">columns</span>
<span class="n">x_weights</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="n">x_weights</span><span class="o">.</span><span class="n">numpy</span><span class="p">()]),</span> <span class="n">columns</span><span class="o">=</span><span class="n">columns</span><span class="p">)</span>
<span class="c1"># observe from the .csv files that X is always in increments of 0.5</span>
<span class="n">x_weights</span> <span class="o">=</span> <span class="n">x_weights</span><span class="o">.</span><span class="n">applymap</span><span class="p">(</span><span class="k">lambda</span> <span class="n">val</span><span class="p">:</span> <span class="nb">round</span><span class="p">(</span><span class="n">val</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span>

<span class="n">y_weights</span> <span class="o">=</span> <span class="n">params</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">detach</span><span class="p">()</span>
<span class="n">y_weights</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="n">y_weights</span><span class="o">.</span><span class="n">numpy</span><span class="p">()]),</span> <span class="n">columns</span><span class="o">=</span><span class="n">columns</span><span class="p">)</span>
<span class="c1"># observe from the .csv files that Y is always in increments of 0.25</span>
<span class="n">y_weights</span> <span class="o">=</span> <span class="n">y_weights</span><span class="o">.</span><span class="n">applymap</span><span class="p">(</span><span class="k">lambda</span> <span class="n">val</span><span class="p">:</span> <span class="nb">round</span><span class="p">(</span><span class="n">val</span><span class="o">*</span><span class="mi">4</span><span class="p">)</span><span class="o">/</span><span class="mi">4</span><span class="p">)</span>

<span class="n">all_weights</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">concat</span><span class="p">([</span><span class="n">x_weights</span><span class="p">,</span> <span class="n">y_weights</span><span class="p">],</span> <span class="n">ignore_index</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">all_weights</span><span class="o">.</span><span class="n">index</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;X&#39;</span><span class="p">,</span><span class="s1">&#39;Y&#39;</span><span class="p">]</span>
<span class="n">all_weights</span><span class="o">.</span><span class="n">to_csv</span><span class="p">(</span><span class="s1">&#39;weights.csv&#39;</span><span class="p">)</span>
<span class="c1"># same output as linear regression</span>
</code></pre></div><p>Yes, solving a system of linear equations and linear regression are both much simpler than training a neural net. However, I just couldn&rsquo;t pass up making the wonderfully alliterative phrase of &lsquo;Normie Neural Networks&rsquo; (NNN) a reality! Too bad I didn&rsquo;t do this in November&hellip;</p>
<h3 id="statistical-corrections">Statistical corrections</h3>
<p>When we dot product the X and Y weights with our answer data, we find that the difference between the predicted and actual XY coordinates is <code>[-2, -0.25]</code>. So when the quiz taker gives the default answers to the statistical questions (besides the male/female/other one), their XY coordinates are adjusted 2 left and 0.25 down.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">for</span> <span class="n">ans</span><span class="p">,</span> <span class="n">res</span> <span class="ow">in</span> <span class="n">data_loader</span><span class="p">:</span>
    <span class="n">pred_res</span> <span class="o">=</span> <span class="n">torch</span><span class="o">.</span><span class="n">from_numpy</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[(</span><span class="n">ans</span><span class="nd">@x_tensor.T</span><span class="p">)</span><span class="o">.</span><span class="n">item</span><span class="p">(),(</span><span class="n">ans</span><span class="nd">@y_tensor.T</span><span class="p">)</span><span class="o">.</span><span class="n">item</span><span class="p">()]]))</span>
    <span class="n">diff</span> <span class="o">=</span> <span class="n">res</span><span class="o">.</span><span class="n">numpy</span><span class="p">()</span><span class="o">.</span><span class="n">flatten</span><span class="p">()</span><span class="o">-</span><span class="n">pred_res</span><span class="o">.</span><span class="n">numpy</span><span class="p">()</span><span class="o">.</span><span class="n">flatten</span><span class="p">()</span>
    <span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s1">&#39;diff: {diff}&#39;</span><span class="p">)</span>
    <span class="c1"># [-2, -0.25]</span>
</code></pre></div><p>Doing a similar thing to the other combinations yielded the <a href="https://github.com/nathanielbd/normie-neural-networks/blob/master/stat-corrections.csv">statistical corrections</a> for every combination of answers to the statistical questions. It turns out that linear regression fails to predict the statistical corrections, so this approach may have been the way to go. However, as the Normie Test receives more and more data, the statistics may change to the point where these corrections are no longer accurate.</p>
<h3 id="classification">Classification</h3>
<p>The white dividing lines seen on the results page diagram are misleading. The actual class boundaries are measured in intervals of 0.5 for the X coordinates and 0.25 for the Y coordinates.</p>
<table>
<thead>
<tr>
<th align="center"><img src="/normie.png" alt="Made with MSPaint!"></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">These intervals achieved 100% accuracy on the 14400 point dataset</td>
</tr>
</tbody>
</table>
<hr>
<p>So I guess now there&rsquo;s a way to create an open source version of the Normie Test. And you can try to calculate the probability that your friend rates their life below 3 if you know some of their answers and their XY coordinates.</p>
]]></content>
		</item>
		
		<item>
			<title>Ode to the Perceptron</title>
			<link>https://nathanielbd.github.io/posts/ode-to-the-perceptron/</link>
			<pubDate>Fri, 08 Jan 2021 00:21:04 -0600</pubDate>
			
			<guid>https://nathanielbd.github.io/posts/ode-to-the-perceptron/</guid>
			<description>If I had to explain to someone the paradigm of deep learning, I&amp;rsquo;d start by mentioning
The Perceptron Given
\(X\), an \(n \times m\) matrix where each row \(x\) is a data vector with \(m\) features,
\(w\), a vector of \(m\) weights,
\(b\), a bias value,
define a function \(f\):
$$f(x) = \begin{cases}1 &amp;amp; \text{if } w \cdot x + b &amp;gt; 0 \\ 0 &amp;amp; \text{otherwise} \end{cases}$$
The task of predicting a class \(d\) of some row \(x\) can be solved via an iteratively-improving algorithm thought to be &amp;lsquo;trained&amp;rsquo; with the data in \(X\).</description>
			<content type="html"><![CDATA[<p>If I had to explain to someone the paradigm of deep learning, I&rsquo;d start by mentioning</p>
<h2 id="the-perceptron">The Perceptron</h2>
<p>Given</p>
<p>\(X\), an \(n \times m\) matrix where each row \(x\) is a data vector with \(m\) features,</p>
<p>\(w\), a vector of \(m\) weights,</p>
<p>\(b\), a bias value,</p>
<p>define a function \(f\):</p>
<p>$$f(x) = \begin{cases}1 &amp; \text{if } w \cdot x + b &gt; 0 \\ 0 &amp; \text{otherwise} \end{cases}$$</p>
<p>The task of predicting a class \(d\) of some row \(x\) can be solved via an iteratively-improving algorithm thought to be &lsquo;trained&rsquo; with the data in \(X\). The training algorithm pseudocode is:</p>
<pre><code>initialize w
define epochs
define rate
for 1...epochs
	for row x in X
		y := f(x)
		w := w + rate*(d-y)*x
	stop if w has converged
</code></pre><table>
<thead>
<tr>
<th align="center">
 <video controls width="80%"><source src="/Perceptron.mp4"></video> </th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">\(w\) is the <a href="https://en.wikipedia.org/wiki/Normal_(geometry)"><em>normal vector</em></a> to the decision boundary. It is updated when there is a classification mistake <em>i.e.</em> when \(d\not=y\). <a href="https://gist.github.com/nathanielbd/9f61a02fd76b244cb180db171998c814">Code</a></td>
</tr>
</tbody>
</table>
<p>While simple and limited (it can only achieve perfect classification when the data is <a href="https://en.wikipedia.org/wiki/Linear_separability">linearly separable</a>), it has many of the ingredients later used in the deep learning &lsquo;paradigm&rsquo;:</p>
<h3 id="parameters">Parameters</h3>
<p>We may think of each entry \(w_i\) of \(w\) as a variational parameter; \(f\) behaves slightly differently for slightly different combinations of values of all the \(w_i\)s. In fact, \(f\) can model all linear decision boundaries by varying \(w\) and \(b\).</p>
<p>There are several key differences between deep learning and perceptrons. Of course, deep learning has many more parameters, but the variation of those parameters allow them to model a much richer class of functions than just linear ones. In fact, deeps neural networks <a href="http://neuralnetworksanddeeplearning.com/chap4.html">can approximately compute any function</a>. This enables them to complete many tasks other than classification. For example, deep Q networks approximately compute the function which returns the <a href="https://en.wikipedia.org/wiki/Q-learning#Algorithm">reward given a state and an action</a> in order to determine the optimal policy of an agent in an environment such as an Atari game.</p>
<table>
<thead>
<tr>
<th align="center"><img src="https://upload.wikimedia.org/wikipedia/commons/e/e0/Q-Learning_Matrix_Initialized_and_After_Training.png" alt="Credit: LearnDataSci, Wikipedia"></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">Q-learning approximating the state-action function through the training process</td>
</tr>
</tbody>
</table>
<p><em>Note</em>: You might have noticed that \(b\) is not changed in the training algorithm despite being a parameter. In practice, we often solve this by having \(w_0\) be the bias and appending 1 as the first entry of each row \(x\) in \(X\).</p>
<h3 id="convergence">Convergence</h3>
<p>The training algorithm stops when \(w\) ceases to change by a certain amount with each step.</p>
<p>More importantly, this is achieved <em>despite</em> the random initialization of \(w\). The training algorithm can correct mistakes during training by the vector addition</p>
<p>$$w := w + r(d-y)x$$</p>
<p>which rotates the decision boundary in the appropriate direction, as seen in the animation. Deep learning makes a more powerful generalization to convergence and self-correction: loss functions. While linear decision boundaries can measure their performance by computing the dot product and therefore the <a href="https://en.wikipedia.org/wiki/Cosine_similarity">cosine similarity</a> of its norm and positive-class data points, we can define loss functions which establishes how well the neural network is approximating the desired function. Since these loss functions are differentiable with respect to our parameters, we can iteratively subtract multiples of the gradient for self-correction instead of vector addition like the perceptron does. Actually, there are a rich class of optimization algorithms based on the gradient and Hessian of the loss function.</p>
<table>
<thead>
<tr>
<th align="center"><img src="https://emiliendupont.github.io/imgs/optim_viz_only_adam.png" alt="so cool"></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">Check out this <a href="https://emiliendupont.github.io/2018/01/24/optimization-visualization/">wonderful visualization</a> of optimization algorithms by Emilien Dupont</td>
</tr>
</tbody>
</table>
<h3 id="activation-functions">Activation functions</h3>
<p>Notice in the definition of \(f\) that we predicted the class based on whether the sign of \(w \cdot x + b\) was positive or negative. This alludes to the concept of an activation function: an operation applied on the outputs of the neural network so that its computation is not merely matrix or vector multiplication. Can you convince yourself that matrix multiplication alone does not enable universal function approximation? That activation functions like <a href="https://en.wikipedia.org/wiki/Sigmoid_function">sigmoid</a> does? What about <a href="https://en.wikipedia.org/wiki/Rectifier_(neural_networks)">ReLU</a>?</p>
<hr>
<p>Although in retrospect it is easy to trace many of the features of the deep learning paradigm to the perceptron, this connectionist view of AI is one that was developed over several decades after Frank Rosenblatt&rsquo;s original research on the perceptron. To me, it&rsquo;s a fun toy example to plant the seeds in an enthusiast&rsquo;s mind for the future contributions by Werbos, Rumelhart, Hopfield, McCullough, and more!</p>
]]></content>
		</item>
		
		<item>
			<title>Making a Portfolio Site</title>
			<link>https://nathanielbd.github.io/posts/making-a-portfolio-site/</link>
			<pubDate>Sun, 30 Aug 2020 15:39:47 -0500</pubDate>
			
			<guid>https://nathanielbd.github.io/posts/making-a-portfolio-site/</guid>
			<description>This content was created as part of an educational workshop for SASE Labs UMN, of which I served as director from 2020-2021.
For readers of this blog:
I use KaTeX for math typesetting. When I embed GitHub gists, I add this CSS (as a Hugo partial). When the GitHub gist is a .csv file I add the following CSS:
.gist .markdown-body .csv-data th, .gist .markdown-body .csv-data td, .gist .markdown-body .csv-data .</description>
			<content type="html"><![CDATA[<p><em>This content was created as part of an educational workshop for <a href="https://saseumn.org">SASE Labs UMN</a>, of which I served as director from 2020-2021.</em></p>
<p>For readers of this blog:</p>
<p>I use <a href="https://katex.org/">KaTeX</a> for math typesetting. When I embed GitHub gists, I add <a href="https://gist.github.com/adimancv/eb2f4b46d3c95e6b8fe4dd52375236b2">this CSS</a> (as a Hugo partial). When the GitHub gist is a <code>.csv</code> file I add the following CSS:</p>
<div class="highlight"><pre class="chroma"><code class="language-css" data-lang="css"><span class="p">.</span><span class="nc">gist</span> <span class="p">.</span><span class="nc">markdown-body</span> <span class="p">.</span><span class="nc">csv-data</span> <span class="nt">th</span><span class="o">,</span> <span class="p">.</span><span class="nc">gist</span> <span class="p">.</span><span class="nc">markdown-body</span> <span class="p">.</span><span class="nc">csv-data</span> <span class="nt">td</span><span class="o">,</span> <span class="p">.</span><span class="nc">gist</span> <span class="p">.</span><span class="nc">markdown-body</span> <span class="p">.</span><span class="nc">csv-data</span> <span class="p">.</span><span class="nc">blob-num</span> <span class="p">{</span><span class="k">background</span><span class="p">:</span> <span class="mh">#000</span><span class="p">;</span> <span class="k">background-color</span><span class="p">:</span> <span class="mh">#000</span><span class="p">;}</span>
<span class="p">.</span><span class="nc">gist</span> <span class="p">.</span><span class="nc">blob-interaction-bar</span> <span class="p">.</span><span class="nc">octicon-search</span> <span class="o">&gt;</span> <span class="nt">path</span> <span class="p">{</span><span class="n">fill</span><span class="p">:</span> <span class="mh">#fff</span><span class="p">}</span>
<span class="p">.</span><span class="nc">gist</span> <span class="p">.</span><span class="nc">blob-interaction-bar</span> <span class="o">&gt;</span> <span class="nt">input</span> <span class="p">{</span><span class="k">background</span><span class="p">:</span> <span class="mh">#000</span><span class="p">}</span>
<span class="p">.</span><span class="nc">gist</span> <span class="p">.</span><span class="nc">blob-interaction-bar</span> <span class="p">{</span><span class="k">background</span><span class="p">:</span> <span class="mh">#000</span><span class="p">}</span>
</code></pre></div><p>This ensures that the gists are in dark theme.</p>
<p>Due to GitHub&rsquo;s JavaScript messing with the CSS, this must be added after the embedding. I accomplish this by using a raw HTML shortcode: <code>{{.Inner}}</code>.</p>
<hr>
<h1 id="motivation">Motivation</h1>
<p>Having a personal website makes you stand out in the sea of other online applications. It&rsquo;s a
way to introduce yourself and control your image to employers online. It&rsquo;s a convient way to
host a blog, your résumé, and a portfolio.</p>
<h1 id="how">How</h1>
<ul>
<li><a href="https://gohugo.io/">Hugo</a>, a static site generator. It takes a chosen theme and your text files and creates the HTML, CSS, and JavaScript files needed to make a nice-looking website.</li>
<li><a href="https://pages.github.com/">GitHub Pages</a>, a service that allows you to host a website and it&rsquo;s source files for free.</li>
</ul>
<h1 id="why">Why&hellip;</h1>
<p>GitHub Pages?</p>
<ul>
<li>It&rsquo;s free</li>
<li>It&rsquo;s conveniently compatible with git for version control</li>
</ul>
<p>Hugo?</p>
<ul>
<li><a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet">Markdown</a> is really easy to use to write each page of your site. It&rsquo;s much easier than HTML.</li>
<li>It works well with GitHub Pages</li>
</ul>
<p>This site was generated with Hugo and hosted on GitHub Pages.</p>
<table>
<thead>
<tr>
<th align="center"><img src="/hermit.png" alt="Specifically, this site uses the Hermit Hugo theme"></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><em>Specifically, this site uses the <a href="https://themes.gohugo.io/hermit/">Hermit Hugo theme</a></em></td>
</tr>
</tbody>
</table>
<h1 id="the-setup">The Setup</h1>
<ol>
<li><a href="https://github.com/join">Create a GitHub account</a></li>
<li>Get familiar with using the Linux, Mac, or Windows terminal. Just knowing how to list the files in the directory and change directory is okay. We will use text commands on the command line to interact with git, GitHub, and Hugo.</li>
<li><a href="https://git-scm.com/downloads">Install git</a>. <a href="https://github.com/SASE-Labs-2020/tutorials/blob/master/2020-01-30-git-familiar-with-git.md">What is git?</a></li>
<li><a href="https://gohugo.io/getting-started/installing/##homebrew-linux">Install Hugo</a></li>
<li><a href="https://themes.gohugo.io/tags/portfolio/">Pick a theme</a></li>
<li>Pick a text editor to use to write your site. I recommend <a href="https://code.visualstudio.com/">VSCode</a> or <a href="https://www.sublimetext.com/">Sublime</a>.</li>
</ol>
<table>
<thead>
<tr>
<th align="center"><img src="/vscode.png" alt="I wrote this post using VSCode"></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">I wrote this post using VSCode</td>
</tr>
</tbody>
</table>
<h1 id="actually-making-the-site">Actually making the site</h1>
<ul>
<li>Read the documentation on your Hugo Theme&rsquo;s page. Make sure to follow any special steps mentioned there not mentioned in this tutorial.</li>
<li>Type out <code>hugo new site &lt;your-site-name&gt;</code>. This will create a directory called <code>&lt;your-sitename&gt;</code> with subdirectories including <code>content</code>, <code>static</code>, and <code>themes</code>.</li>
<li>Check out the GitHub repository for your Hugo theme. Look to its <code>exampleSite</code> folder for guidance. Copy the link to the repository and run the command <code>git clone https://github.com/&lt;your-theme-repo-link&gt; themes/&lt;your-hugo-theme-name&gt;</code>. This copies the repository into the <code>themes</code> folder.</li>
<li>You should follow the example site for how to write your <code>config.toml</code> file</li>
<li>Typing the command <code>hugo new &lt;title&gt;.md</code> creates a new page <code>&lt;title&gt;.md</code> in the <code>content</code> folder. It will autogenerate a Markdown front matter for you, including the date, title, and other details of the page.</li>
<li>Follow the <a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet">Markdown cheat sheet</a> to write your page below the front matter. My posts normally only consist of headers, code blocks, tables, images, links, and text.</li>
<li>Make sure you like how your page looks. To see what it will look like before you make the site live, run <code>hugo serve</code> or <code>hugo server</code> to run the webpage locally. Type &lsquo;localhost:1313&rsquo; in the address bar to see your working version.</li>
</ul>
<h1 id="deploying-to-github-pages">Deploying to GitHub Pages</h1>
<p>Use <a href="https://gohugo.io/hosting-and-deployment/hosting-on-github/">this guide</a> as a reference.</p>
<ul>
<li>If you are using Linux, Mac, or WSL, you can start <a href="https://gohugo.io/hosting-and-deployment/hosting-on-github/">here</a></li>
<li>If you are using Windows, instead of running <code>./deploy.sh</code> in the final step, you should run <code>bash -c './deploy.sh'</code> instead</li>
</ul>
<p>This will host your site at <code>&lt;your-github-username&gt;.github.io</code>. If you&rsquo;d like yourself to stand out even more, you could purchase a domain name and <a href="https://docs.github.com/en/github/working-with-github-pages/about-custom-domains-and-github-pages">use that name with GitHub Pages</a>.</p>
]]></content>
		</item>
		
		<item>
			<title>Unexpected Lessons from breaking Webgames</title>
			<link>https://nathanielbd.github.io/posts/breaking-webgames/</link>
			<pubDate>Sat, 25 Jul 2020 18:26:45 -0500</pubDate>
			
			<guid>https://nathanielbd.github.io/posts/breaking-webgames/</guid>
			<description>One of the reasons I started programming was to code exploits in webgames. The other reason involves a certain 1980s text adventure, but that is a story for another day.
        Almost as sarcastic as Zork, but in first person    Looking back, I realize that this unconventional way of getting into programming exposed me to several important concepts early. Let&amp;rsquo;s look at a few from the perspective of a programming noob.</description>
			<content type="html"><![CDATA[<p>One of the reasons I started programming was to code exploits in webgames. The other reason involves a certain 1980s text adventure, but that is a story for another day.</p>
<table>
<thead>
<tr>
<th align="center"><img src="https://github.com/nathanielbd/nathanielbd.github.io/blob/6e4fdf1f66e40a8940975b22f09615e65c82ff84/ccc.png?raw=true" alt="Yes, the 80s game was Zork"></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">Almost as sarcastic as Zork, but in first person</td>
</tr>
</tbody>
</table>
<p>Looking back, I realize that this unconventional way of getting into programming exposed me to several important concepts early. Let&rsquo;s look at a few from the perspective of a programming noob. All code can be found as <a href="https://gist.github.com/nathanielbd">gists</a>.</p>
<h1 id="protobowlcom">Protobowl.com</h1>
<p>I played NAQT Quiz Bowl in high school. When I found out about <a href="https://protobowl.com">protobowl</a>, an online real time multiplayer quizbowl webapp, I immediately sunk hours into it. Occasionally finding players buzzing in suspiciously early, I decided to probe for exploits.</p>
<p>This was my first exploit, so the only tool at my disposal was the trusty <code>F12</code>, <code>CTRL-SHIFT-I</code>, or right-clicking &lsquo;Inspect Element&rsquo; to pull up the in-browser developer tools. I quickly realized that the file called <code>app.js</code> I was looking at in the debugger wasn&rsquo;t source code.</p>
<table>
<thead>
<tr>
<th align="center"><img src="/protobowl.png" alt="yup"></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><em>Definitely</em> not source code</td>
</tr>
</tbody>
</table>
<h2 id="code-obfuscation">Code Obfuscation</h2>
<p>Obfuscation is the process of deliberately making code hard to read by humans. In the case of a JavaScript app like Protobowl, it makes the scripts sent to the user for the web-page smaller and quicker to download. This meant that while they will be harder to find, if there is a vulnerability in <code>app.js</code>, I would be able to execute it on my device (the client).</p>
<p>A common patten in obfuscation is renaming variables from their human-readable names to typically 1-2 letter names. However, you cannot change strings without changing the behavior of the program. Therefore, any string found in the source code will be found verbatim in the obfuscated code I find on my device. The tricky part would be finding a string that would lead me directly to a vulnerability&hellip;</p>
<h2 id="css-selector-strings-and-the-dom">CSS Selector Strings and the DOM</h2>
<p>My idea for a vulnerability was to trigger an event to reveal the current question&rsquo;s answer before the question had actually ended. I knew the HTML for the page looked like this:</p>
<pre><code>&lt;div id=&quot;history&quot;&gt;
	&lt;div class=&quot;bundle qid-54769933ea23cca9055100a1 active&quot;&gt;...&lt;/div&gt;
	&lt;div class=&quot;bundle qid-5476da99ea23cca905518219 revealed&quot;&gt;
		&lt;ul class=&quot;breadcrumb&quot;&gt;
			&lt;ul&gt;
				...
				&lt;li class=&quot;pull-right answer done&quot;&gt;
					The Answer!
				&lt;/li&gt;
			&lt;/ul&gt;
		&lt;/ul&gt;
		...
	&lt;/div&gt;
&lt;/div&gt;
</code></pre><p>Of course, the first things I searched in the obfuscated code were &lsquo;bundle&rsquo;, &lsquo;history&rsquo;, &lsquo;breadcrumb&rsquo;, and &lsquo;pull-right answer.&rsquo; Sure enough, I&rsquo;d find a function called <code>tt</code> which turned about to be <a href="https://github.com/neotenic/protobowl/blob/master/client/render.coffee#L838">this function</a> after obfuscation. It was exactly what I needed.</p>
<table>
<thead>
<tr>
<th align="center"><img src="/obfuscated.png" alt=""></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">Can you see the resemblance?</td>
</tr>
</tbody>
</table>
<p>To avoid ruining the puzzle, I&rsquo;ll leave it as an exercise for the reader to <a href="https://www.merriam-webster.com/dictionary/grok">grok</a> each line of the obfuscated code.</p>
<h3 id="the-bom">The BOM</h3>
<p>I&rsquo;d later learn to look for the <code>window</code> object in the console several <a href="https://www.w3schools.com/js/js_window.asp">w3schools pages later</a>. I was surprised to find out that all global functions and objects are children of this <code>window</code>, including one called <code>$o</code> (at least it was called that in the build at the time) that contained the answer to the current question.</p>
<h2 id="automation">Automation</h2>
<p>Turning this exploit into a point farm would yield what I consider to be my first lines of code.</p>
<div class="highlight"><pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
  <span class="nx">tt</span><span class="p">();</span>
  <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;.buzzbtn&#34;</span><span class="p">).</span><span class="nx">click</span><span class="p">();</span>
  <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;.guess_input&#34;</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s2">&#34;[class=&#39;pull-right answer done&#39;]&#34;</span><span class="p">).</span><span class="nx">first</span><span class="p">().</span><span class="nx">text</span><span class="p">());</span>
  <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;.guess_form&#34;</span><span class="p">).</span><span class="nx">submit</span><span class="p">();</span>
  <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;.nextbtn&#34;</span><span class="p">).</span><span class="nx">click</span><span class="p">();</span>
<span class="p">},</span> <span class="mi">7000</span><span class="p">);</span>
</code></pre></div><p>The version I made after discovering <code>window</code>:</p>
<div class="highlight"><pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
  <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;.buzzbtn&#34;</span><span class="p">).</span><span class="nx">click</span><span class="p">();</span>
  <span class="kd">var</span> <span class="nx">guess</span> <span class="o">=</span> <span class="nx">$o</span><span class="p">.</span><span class="nx">answer</span><span class="p">;</span>
  <span class="c1">// only the essential part of the answer is surrounded by &#39;{}&#39;
</span><span class="c1"></span>  <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;.guess_input&#34;</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="nx">guess</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">guess</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;{&#39;</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nx">guess</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;}&#39;</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">));</span>
  <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;.guess_form&#34;</span><span class="p">).</span><span class="nx">submit</span><span class="p">();</span>
  <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;.nextbtn&#34;</span><span class="p">).</span><span class="nx">click</span><span class="p">();</span>
<span class="p">},</span> <span class="mi">7000</span><span class="p">);</span>
</code></pre></div><table>
<thead>
<tr>
<th align="center"><img src="/automated.gif" alt=""></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">Of course, the first thing I tried was changing the interval to 1 second</td>
</tr>
</tbody>
</table>
<p>The first code I ever read was obfuscated and the first code I ever wrote was a webgame exploit, but I&rsquo;d argue that this natural introduction to the DOM, HTML, and CSS gave me a good start as a beginner.</p>
<h1 id="morsecodeme">morsecode.me</h1>
<p>This is a weekend project by <a href="https://twitter.com/bkanber">Burak Kanber</a> that hosts morse code chat rooms. In my attempt to create a tool to allow me to chat without knowing any morse code, I got a healthy taste of JavaScript higher-order functions, concurrency, and <code>Promise</code>s.</p>
<table>
<thead>
<tr>
<th align="center"><img src="/zhao.png" alt=""></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">I didn&rsquo;t know you were skilled with broadswords, Prince Zuko</td>
</tr>
</tbody>
</table>
<h2 id="the-idea">The idea</h2>
<p>Instead of using the button to emit the dits and dahs of morse code, let&rsquo;s create a tool that will translate your keypresses into the appropriate dits and dahs.</p>
<h3 id="signal-duration">Signal duration</h3>
<p>We can use <code>mouseup</code> and <code>mousedown</code> events to trigger the signal, but there needs to be a way to sleep between those two events. There isn&rsquo;t any sleep function, but asynchronous functions can pause their execution until another function returns a fulfilled <code>Promise</code>. Here, a <code>Promise</code> is an object that holds information on the completion of an asynchronous call. It is said to be fulfilled when that call is completed.</p>
<p>If our asynchronous call is <code>setTimeout</code>, we can create our own &lsquo;sleep&rsquo; from scratch.</p>
<div class="highlight"><pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">sleep</span><span class="p">(</span><span class="nx">ms</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span><span class="nx">resolve</span> <span class="p">=&gt;</span> <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">ms</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div><p>Thus we have</p>
<div class="highlight"><pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">async</span> <span class="kd">function</span> <span class="nx">dit</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">$</span><span class="p">(</span><span class="nx">button</span><span class="p">).</span><span class="nx">trigger</span><span class="p">(</span><span class="s2">&#34;mousedown&#34;</span><span class="p">);</span>
	<span class="nx">await</span> <span class="nx">sleep</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
	<span class="nx">$</span><span class="p">(</span><span class="nx">button</span><span class="p">).</span><span class="nx">trigger</span><span class="p">(</span><span class="s2">&#34;mouseup&#34;</span><span class="p">);</span>
<span class="p">}</span>
<span class="nx">async</span> <span class="kd">function</span> <span class="nx">dah</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">$</span><span class="p">(</span><span class="nx">button</span><span class="p">).</span><span class="nx">trigger</span><span class="p">(</span><span class="s2">&#34;mousedown&#34;</span><span class="p">);</span>
	<span class="nx">await</span> <span class="nx">sleep</span><span class="p">(</span><span class="mi">300</span><span class="p">);</span>
	<span class="nx">$</span><span class="p">(</span><span class="nx">button</span><span class="p">).</span><span class="nx">trigger</span><span class="p">(</span><span class="s2">&#34;mouseup&#34;</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>to emit our dits and dahs.</p>
<h3 id="dispatch-system">Dispatch system</h3>
<p>Initially, I wanted to add letters to a queue whenever the user pressed a key. The queue would be addressed by a <code>setInterval</code> that periodically called <code>dit</code> and <code>dah</code>. However, this doesn&rsquo;t work. <code>setInterval</code> works by calling the same callback function over and over in an interval, but asynchronous functions (like one that would call <code>dit</code> and <code>dah</code>) can only resolve a <code>Promise</code> once.</p>
<p>To get around this problem, I decided to use the <a href="https://en.wikipedia.org/wiki/Fluent_interface">fluent interface</a> design pattern. Essentially, it uses method chaining to provide an efficient interface. You might have seen it while reading jQuery code or even in the Protobowl obfuscated code like with this line:</p>
<div class="highlight"><pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">n</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;ul&gt;&#39;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;breadcrumb&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">o</span><span class="p">)).</span><span class="nx">append</span><span class="p">(</span><span class="nx">s</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div&gt;&#39;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;sticky&#39;</span><span class="p">)).</span><span class="nx">append</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div&gt;&#39;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;annotations&#39;</span><span class="p">))</span>
</code></pre></div><p>It&rsquo;s <a href="https://schier.co/blog/method-chaining-in-javascript#understanding-method-chaining-10">not hard</a> to make a fluent interface in JavaScript. Just have each method return <code>this</code> in order to preserve the context for the next method. I&rsquo;ll leverage this fact, along with the fact that <code>Promise</code>s can chain callbacks using <code>.then()</code>, to create my own fluent interface for dispatching the dits and dahs.</p>
<div class="highlight"><pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">async</span> <span class="kd">function</span> <span class="nx">dit</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">$</span><span class="p">(</span><span class="nx">button</span><span class="p">).</span><span class="nx">trigger</span><span class="p">(</span><span class="s2">&#34;mousedown&#34;</span><span class="p">);</span>
	<span class="nx">await</span> <span class="nx">sleep</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
	<span class="nx">$</span><span class="p">(</span><span class="nx">button</span><span class="p">).</span><span class="nx">trigger</span><span class="p">(</span><span class="s2">&#34;mouseup&#34;</span><span class="p">);</span>
	<span class="k">return</span> <span class="k">this</span><span class="p">;</span> <span class="c1">// + this line
</span><span class="c1"></span><span class="p">}</span>
<span class="nx">async</span> <span class="kd">function</span> <span class="nx">dah</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">$</span><span class="p">(</span><span class="nx">button</span><span class="p">).</span><span class="nx">trigger</span><span class="p">(</span><span class="s2">&#34;mousedown&#34;</span><span class="p">);</span>
	<span class="nx">await</span> <span class="nx">sleep</span><span class="p">(</span><span class="mi">300</span><span class="p">);</span>
	<span class="nx">$</span><span class="p">(</span><span class="nx">button</span><span class="p">).</span><span class="nx">trigger</span><span class="p">(</span><span class="s2">&#34;mouseup&#34;</span><span class="p">);</span>
	<span class="k">return</span> <span class="k">this</span><span class="p">;</span> <span class="c1">// + this line
</span><span class="c1"></span><span class="p">}</span>
<span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&#34;keypress&#34;</span><span class="p">,</span> <span class="nx">async</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
	<span class="c1">// get the corresponding dashes and dots for the key that was pressed
</span><span class="c1"></span>	<span class="kd">var</span> <span class="nx">ditdah</span> <span class="o">=</span> <span class="nx">table</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">key</span><span class="p">];</span>
	<span class="p">[...</span><span class="nx">ditdah</span><span class="p">].</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">composing</span><span class="p">,</span> <span class="nx">curr</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">curr</span> <span class="o">===</span> <span class="s1">&#39;.&#39;</span> <span class="o">?</span> <span class="nx">composing</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">dit</span><span class="p">)</span> <span class="o">:</span> <span class="nx">composing</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">dah</span><span class="p">),</span> <span class="nx">sleep</span><span class="p">(</span><span class="mi">100</span><span class="p">));</span>
<span class="p">});</span>
</code></pre></div><h4 id="the-glorious-one-liner">The glorious one-liner</h4>
<p>The solution combined using the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax">spread operator</a> to expand the string made up of dashes and dots into an array of characters,</p>
<div class="highlight"><pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// var ditdah = &#39;-.&#39;;
</span><span class="c1"></span><span class="p">[...</span><span class="nx">ditdah</span><span class="p">]</span>
<span class="c1">// [&#39;-&#39;, &#39;.&#39;]
</span></code></pre></div><p>using the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce"><code>reduce</code> higher-order function</a> to build the chain of <code>Promise</code> callbacks,</p>
<div class="highlight"><pre class="chroma"><code class="language-js" data-lang="js"><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">composing</span><span class="p">,</span> <span class="nx">curr</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="nx">curr</span> <span class="o">===</span> <span class="s1">&#39;.&#39;</span> <span class="o">?</span> <span class="nx">composing</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">dit</span><span class="p">)</span> <span class="o">:</span> <span class="nx">composing</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">dah</span><span class="p">),</span> <span class="nx">sleep</span><span class="p">(</span><span class="mi">100</span><span class="p">));</span>
</code></pre></div><table>
<thead>
<tr>
<th align="center">iteration</th>
<th align="center">composing</th>
<th align="center">current</th>
<th align="center">return</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">start</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"><code>['-', '.']</code></td>
</tr>
<tr>
<td align="center">first</td>
<td align="center"><code>sleep(100)</code></td>
<td align="center"><code>'-'</code></td>
<td align="center"><code>sleep(100).then(dah)</code></td>
</tr>
<tr>
<td align="center">second</td>
<td align="center"><code>sleep(100).then(dah)</code></td>
<td align="center"><code>'.'</code></td>
<td align="center"><code>sleep(100).then(dah).then(dit)</code></td>
</tr>
</tbody>
</table>
<p>and even a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator">ternary</a> conditional to make the whole line super <a href="https://stackoverflow.com/questions/84102/what-is-idiomatic-code">idiomatic</a>.</p>
<table>
<thead>
<tr>
<th align="center"><img src="/morse.gif" alt=""></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">I still don&rsquo;t fully know morse code</td>
</tr>
</tbody>
</table>
<h1 id="skribblio">skribbl.io</h1>
<p>It&rsquo;s a popular game similar to Pictionary, except you know how many letters the word is like in Hangman. I found that <a href="https://github.com/skribbliohints/skribbliohints.github.io">someone had collected data using a bot that played on the site for months</a>, so I decided to create an exploit for it also.</p>
<h2 id="the-idea-1">The idea</h2>
<p>The idea is essentially what didn&rsquo;t end up happening with the morse code exploit; add possible words into a queue and have a <code>setInterval</code> guess from the queue as fast as possible (without getting banned for spam).</p>
<p><em>Aside</em>: Looking back, the familiarity with this pattern of fetching data to store for future use probably helped me learn React very quickly. Have you ever written a <code>componentDidMount</code> before?</p>
<h3 id="regex">RegEx</h3>
<p>The idea is somewhat simple, but a complicated part is trying to only guess words that fit the number of letters and any letter that is revealed.</p>
<table>
<thead>
<tr>
<th align="center"><img src="/yoda.png" alt=""></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><em>Ackchually</em> he&rsquo;s called &lsquo;The Child&rsquo;</td>
</tr>
</tbody>
</table>
<p>For what is revealed here, we want to guess &lsquo;soda,&rsquo; &lsquo;yoda,&rsquo; or any four letter words containing a &rsquo;d&rsquo; in the third spot. This turns out to be a natural place to use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions">regular expressions</a> since they can match patterns in strings.</p>
<div class="highlight"><pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">hint</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#currentWord&#34;</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">textContent</span><span class="p">;</span> 
<span class="c1">// &#39;__d_&#39;
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">regex</span> <span class="o">=</span> <span class="s1">&#39;^&#39;</span> <span class="o">+</span> <span class="nb">String</span><span class="p">.</span><span class="nx">raw</span><span class="sb">`</span><span class="err">\</span><span class="sb">b`</span> <span class="o">+</span> <span class="nx">hint</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/_/g</span><span class="p">,</span> <span class="s1">&#39;[a-zA-Z0-9]&#39;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/ /g</span><span class="p">,</span> <span class="nb">String</span><span class="p">.</span><span class="nx">raw</span><span class="sb">`</span><span class="err">\</span><span class="sb">s`</span><span class="p">)</span> <span class="o">+</span> <span class="nb">String</span><span class="p">.</span><span class="nx">raw</span><span class="sb">`</span><span class="err">\</span><span class="sb">b`</span> <span class="o">+</span> <span class="s1">&#39;$&#39;</span><span class="p">;</span>
<span class="c1">// &#39;^\b[a-zA-Z0-9][a-zA-Z0-9]d[a-zA-Z0-9]\b$&#39;
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">pattern</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="nx">regex</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">pattern</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">word</span><span class="p">))</span> <span class="p">{</span> <span class="c1">// if the possible guess matches the RegEx
</span><span class="c1"></span>	<span class="nx">guesses</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">word</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>The &lsquo;^,&rsquo; &lsquo;$,&rsquo; and <code>\b</code> symbols are used to anchor the patterns. They only match a string if the pattern begins the string, ends the string, and begin/end the words in the string. For example, this prevents our RegEx from matching &lsquo;scattering&rsquo; if we only want &lsquo;cat.&rsquo; Any underscore can be replaced by a lowercase/uppercase letter or number.</p>
<h3 id="automation-1">Automation</h3>
<p>The end result makes use of <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch"><code>fetch</code></a>, a valuable tool when interacting with any REST API.</p>
<div class="highlight"><pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="s2">&#34;https://skribbliohints.github.io/words.json&#34;</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">guesses</span> <span class="o">=</span> <span class="p">[];</span>
<span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nx">fetch</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span>
	<span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">res</span> <span class="p">=&gt;</span> <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>
	<span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">words</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
		<span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
			<span class="k">if</span> <span class="p">(</span><span class="nx">guesses</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
				<span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#inputChat&#34;</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="nx">guesses</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
				<span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#formChat&#34;</span><span class="p">).</span><span class="nx">submit</span><span class="p">();</span>
				<span class="nx">i</span><span class="o">++</span><span class="p">;</span>
			<span class="p">}</span>
		<span class="p">},</span> <span class="mi">1500</span><span class="p">);</span>
		<span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">word</span> <span class="k">in</span> <span class="nx">words</span><span class="p">)</span> <span class="p">{</span>
			<span class="kd">var</span> <span class="nx">hint</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&#34;#currentWord&#34;</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">textContent</span><span class="p">;</span>
			<span class="kd">var</span> <span class="nx">regex</span> <span class="o">=</span> <span class="s1">&#39;^&#39;</span> <span class="o">+</span> <span class="nb">String</span><span class="p">.</span><span class="nx">raw</span><span class="sb">`</span><span class="err">\</span><span class="sb">b`</span> <span class="o">+</span> <span class="nx">hint</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/_/g</span><span class="p">,</span> <span class="s1">&#39;[a-zA-Z0-9]&#39;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/ /g</span><span class="p">,</span> <span class="nb">String</span><span class="p">.</span><span class="nx">raw</span><span class="sb">`</span><span class="err">\</span><span class="sb">s`</span><span class="p">)</span> <span class="o">+</span> <span class="nb">String</span><span class="p">.</span><span class="nx">raw</span><span class="sb">`</span><span class="err">\</span><span class="sb">b`</span> <span class="o">+</span> <span class="s1">&#39;$&#39;</span><span class="p">;</span>
			<span class="kd">var</span> <span class="nx">pattern</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="nx">regex</span><span class="p">);</span>
			<span class="k">if</span> <span class="p">(</span><span class="nx">pattern</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">word</span><span class="p">))</span> <span class="p">{</span>
				<span class="nx">guesses</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">word</span><span class="p">);</span>
				<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">word</span><span class="p">);</span>
			<span class="p">}</span>
		<span class="p">}</span>
	<span class="p">})</span>
	<span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">err</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="k">throw</span> <span class="nx">err</span> <span class="p">});</span>
</code></pre></div><table>
<thead>
<tr>
<th align="center"><img src="/skribbl.gif" alt=""></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">Spicy&hellip; silverware?</td>
</tr>
</tbody>
</table>
<h1 id="conclusion">Conclusion</h1>
<p>I ended up learning about code obfuscation, HTML, CSS, the DOM, design patterns, concurrency, higher-order functions, HTTP, JSON, and RegEx all while having fun finding exploits in webgames. Beginners can be discouraged from programming if they never have projects that are small enough to be achievable, fun enough to be motivating, and reward you with something you can actually use. Why don&rsquo;t we teach programming like this?</p>
]]></content>
		</item>
		
		<item>
			<title>How I used Manim with WSL and data points</title>
			<link>https://nathanielbd.github.io/posts/manim-in-wsl-with-data/</link>
			<pubDate>Fri, 26 Jun 2020 16:04:16 -0500</pubDate>
			
			<guid>https://nathanielbd.github.io/posts/manim-in-wsl-with-data/</guid>
			<description>I recently (last night) submitted my video entry for the Breakthrough Junior Challenge 2020, a competition for students aged 13-18 to submit a video explaining a topic in physics, life sciences, or math in a 3 minute video. In a competition filled with entries with amazing Adobe After Effects and Element 3D editors, I sought to be unique among the 10,000 competitors by using Grant Sanderson/3Blue1Brown&amp;rsquo;s math animation engine, Manim. The source code for my video can be found here.</description>
			<content type="html"><![CDATA[<p>I recently (last night) submitted <a href="https://www.youtube.com/watch?v=ixGwH2oYzzA">my video entry</a> for <a href="https://breakthroughjuniorchallenge.org/">the Breakthrough Junior Challenge 2020</a>, a competition for students aged 13-18 to submit a video explaining a topic in physics, life sciences, or math in a 3 minute video. In a competition filled with entries with amazing Adobe After Effects and Element 3D editors, I sought to be unique among the 10,000 competitors by using Grant Sanderson/3Blue1Brown&rsquo;s math animation engine, <a href="https://github.com/3b1b/manim">Manim</a>. The source code for my video can be found <a href="https://github.com/nathanielbd/bjc2020">here</a>.</p>
<p><img src="https://raw.githubusercontent.com/3b1b/manim/master/logo/cropped.png" alt="Manim logo"></p>
<p>The engine is incredible, but lacks documentation and tutorials. There are a couple good ones that show up when you search &ldquo;manim tutorial&rdquo;, like <a href="https://github.com/Elteoremadebeethoven/AnimationsWithManim">this</a>, <a href="https://github.com/malhotra5/Manim-Tutorial">this</a>, and <a href="https://github.com/saturnman/manim_turorial">this</a>. However, nothing relevant shows up when you search &ldquo;manim WSL&rdquo; or &ldquo;manim data points,&rdquo; so I think that alone justifies making this post.</p>
<h1 id="my-ramblings-on-wsl">My ramblings on WSL</h1>
<p>Feel free to skip this if you&rsquo;re familiar with WSL, but it&rsquo;s greatly improved my software development experience so I thought I&rsquo;d share my thoughts and setup if it&rsquo;d be able to help some people, even if I&rsquo;m not sponsored to do that.</p>
<p>WSL stands for &ldquo;Windows Subsystem for Linux.&rdquo; It allows developers to run a Linux environment on their Windows computer. You can run your favorite distro. It comes with Bash. Perhaps its best perk is giving Windows users access to all the installers and package managers that are so convenient on Linux.</p>
<p>WSL requires an X server to run GUI applications. The one I use and love is <a href="https://mobaxterm.mobatek.net/">MobaXterm</a>. It runs smoothly, has tabs for multiple terminals, pretty colors, and even works over SSH. Personally, I&rsquo;m really happy with my VSCodium/MobaXterm/Vim setup. After switching from Cygwin, PuTTY, and <a href="https://vole.cse.umn.edu/">my university&rsquo;s online Linux desktop</a>, I&rsquo;ve never looked back.</p>
<table>
<thead>
<tr>
<th align="center"><img src="/mobaxterm.png" alt="MobaXTerm"></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">MobaXTerm with X server displaying a pdf using <a href="https://pwmt.org/projects/zathura/">Zathura</a></td>
</tr>
</tbody>
</table>
<h1 id="how-to-install-manim-on-wsl">How to install Manim on WSL</h1>
<p>Manim uses <a href="https://miktex.org">MiKTeX</a> to handle \(\LaTeX\). I followed the intructions <a href="https://miktex.org/howto/install-miktex-unx">here</a> to install.</p>
<p>Next, install dependencies.</p>
<pre><code># install dependencies in Ubuntu
sudo apt install pkg-config libcairo2-dev ffmpeg sox texlive

# install required latex packages
sudo apt install texlive-latex-extra    # &quot;standalone&quot;
sudo apt install texlive-fonts-extra    # &quot;dsfont&quot;
sudo apt install texlive-science        # &quot;physics&quot;
</code></pre><p>Clone Manim from GitHub, create an Anaconda environment, and install the requirements.</p>
<pre><code># install manim
git clone https://github.com/3b1b/manim.git
cd manim
# create Anaconda env
conda env create -f environment.yml
conda activate manim
python3 -m pip install -r requirements.txt
</code></pre><p>Test it out. This must be done in the <code>manim</code> directory.</p>
<pre><code>python3 -m manim example_scenes.py SquareToCircle -pl
</code></pre><p><em>NOTE:</em> the <code>-pl</code> tag means the preview the video by opening it and render it in low quality.</p>
<h1 id="how-to-graph-data-points">How to graph data points</h1>
<p>Use a <code>GraphScene</code> and set its configuration. These are the defaults.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">manimlib.imports</span> <span class="kn">import</span> <span class="o">*</span>

<span class="k">class</span> <span class="nc">YourScene</span><span class="p">(</span><span class="n">GraphScene</span><span class="p">):</span>
	<span class="n">CONFIG</span> <span class="o">=</span> <span class="p">{</span>
	    <span class="s2">&#34;x_min&#34;</span><span class="p">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span>
	    <span class="s2">&#34;x_max&#34;</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
	    <span class="s2">&#34;x_axis_width&#34;</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span>
	    <span class="s2">&#34;x_tick_frequency&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
	    <span class="s2">&#34;x_leftmost_tick&#34;</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span> <span class="c1"># Change if different from x_min</span>
	    <span class="s2">&#34;x_labeled_nums&#34;</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
	    <span class="s2">&#34;x_axis_label&#34;</span><span class="p">:</span> <span class="s2">&#34;$x$&#34;</span><span class="p">,</span>
	    <span class="s2">&#34;y_min&#34;</span><span class="p">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span>
	    <span class="s2">&#34;y_max&#34;</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
	    <span class="s2">&#34;y_axis_height&#34;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span>
	    <span class="s2">&#34;y_tick_frequency&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
	    <span class="s2">&#34;y_bottom_tick&#34;</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span> <span class="c1"># Change if different from y_min</span>
	    <span class="s2">&#34;y_labeled_nums&#34;</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
	    <span class="s2">&#34;y_axis_label&#34;</span><span class="p">:</span> <span class="s2">&#34;$y$&#34;</span><span class="p">,</span>
	    <span class="s2">&#34;axes_color&#34;</span><span class="p">:</span> <span class="n">GREY</span><span class="p">,</span>
	    <span class="s2">&#34;graph_origin&#34;</span><span class="p">:</span> <span class="mf">2.5</span> <span class="o">*</span> <span class="n">DOWN</span> <span class="o">+</span> <span class="mi">4</span> <span class="o">*</span> <span class="n">LEFT</span><span class="p">,</span>
	    <span class="s2">&#34;exclude_zero_label&#34;</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span>
	    <span class="s2">&#34;num_graph_anchor_points&#34;</span><span class="p">:</span> <span class="mi">25</span><span class="p">,</span>
	    <span class="s2">&#34;default_graph_colors&#34;</span><span class="p">:</span> <span class="p">[</span><span class="n">BLUE</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">YELLOW</span><span class="p">],</span>
	    <span class="s2">&#34;default_derivative_color&#34;</span><span class="p">:</span> <span class="n">GREEN</span><span class="p">,</span>
	    <span class="s2">&#34;default_input_color&#34;</span><span class="p">:</span> <span class="n">YELLOW</span><span class="p">,</span>
	    <span class="s2">&#34;default_riemann_start_color&#34;</span><span class="p">:</span> <span class="n">BLUE</span><span class="p">,</span>
	    <span class="s2">&#34;default_riemann_end_color&#34;</span><span class="p">:</span> <span class="n">GREEN</span><span class="p">,</span>
	    <span class="s2">&#34;area_opacity&#34;</span><span class="p">:</span> <span class="mf">0.8</span><span class="p">,</span>
	    <span class="s2">&#34;num_rects&#34;</span><span class="p">:</span> <span class="mi">50</span>
	<span class="p">}</span>
</code></pre></div><p>Draw the axis.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">construct</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
	<span class="bp">self</span><span class="o">.</span><span class="n">setup_axes</span><span class="p">(</span><span class="n">animate</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div><p>This example uses JSON like <code>[{&quot;x&quot;:0, &quot;y&quot;:1}, ..., {&quot;x&quot;:9, &quot;y&quot;:10}]</code>, but you can extract your data using any method as long as it is supported in python.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">json</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;file.json&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">json_file</span>
	<span class="n">coords</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">json_file</span><span class="p">)</span>
<span class="n">data_points</span> <span class="o">=</span> <span class="n">VGroup</span><span class="p">(</span><span class="o">*</span><span class="p">[</span><span class="n">Dot</span><span class="p">(</span><span class="n">point</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">coords_to_point</span><span class="p">(</span><span class="n">coord</span><span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">],</span><span class="n">coord</span><span class="p">[</span><span class="s1">&#39;y&#39;</span><span class="p">),</span> <span class="n">radius</span><span class="o">=</span><span class="mf">0.3</span><span class="p">)</span> <span class="k">for</span> <span class="n">coord</span> <span class="ow">in</span> <span class="n">coords</span><span class="p">])</span>
<span class="bp">self</span><span class="o">.</span><span class="n">play</span><span class="p">(</span><span class="n">Write</span><span class="p">(</span><span class="n">dots</span><span class="p">),</span> <span class="n">run_time</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div><p><img src="/graph.png" alt="A screenshot from my video"></p>
<h2 id="tangent-lines-to-data-points">Tangent lines to data points</h2>
<p>Manim has <a href="https://github.com/3b1b/manim/blob/a529a59abf1f6af02e664dbad1c8474f3a25a61e/manimlib/scene/graph_scene.py#L715">really neat functions</a> for <a href="https://github.com/3b1b/manim/blob/a529a59abf1f6af02e664dbad1c8474f3a25a61e/manimlib/scene/graph_scene.py#L988">plotting tangent lines</a> to <a href="https://github.com/3b1b/manim/blob/839fb4ff582103bd717b9d7937c926ef0390fb01/from_3b1b/old/eoc/chapter9.py#L1080">visualize derivatives</a>, but they only work for graphs created from <code>GraphScene.get_graph</code>. In other words, there is no official support for tangent line plotting for our data points.</p>
<p>My hack around this was to enumerate the graphs of the instantaneous slopes using the slope intercept form of the <a href="https://en.wikipedia.org/wiki/Numerical_differentiation#Finite_differences">secant line for numerical differentiation</a>.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">derivatives</span> <span class="o">=</span> <span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">get_graph</span><span class="p">(</span>
	<span class="c1"># slope intercept form is ugly as a one-liner lambda func</span>
	<span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">((</span><span class="n">coords</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s1">&#39;y&#39;</span><span class="p">]</span><span class="o">-</span><span class="n">coords</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="s1">&#39;y&#39;</span><span class="p">])</span><span class="o">/</span><span class="p">(</span><span class="n">coords</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s1">&#39;x&#39;</span><span class="p">]</span><span class="o">-</span><span class="n">coords</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="s1">&#39;x&#39;</span><span class="p">]))</span><span class="o">*</span><span class="n">x</span><span class="o">+</span><span class="p">(</span><span class="n">coords</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="s1">&#39;y&#39;</span><span class="p">]</span><span class="o">-</span><span class="n">coords</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="s1">&#39;x&#39;</span><span class="p">]</span><span class="o">*</span><span class="p">((</span><span class="n">coords</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s1">&#39;y&#39;</span><span class="p">]</span><span class="o">-</span><span class="n">coords</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="s1">&#39;y&#39;</span><span class="p">])</span><span class="o">/</span><span class="p">(</span><span class="n">coords</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s1">&#39;x&#39;</span><span class="p">]</span><span class="o">-</span><span class="n">coords</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="s1">&#39;x&#39;</span><span class="p">]))),</span>
	<span class="n">PURPLE</span>
<span class="c1"># start from index 1 so since computing slope requires the previous point</span>
<span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">data_points</span><span class="p">)]</span>
<span class="k">for</span> <span class="n">derivative</span><span class="p">,</span> <span class="n">next_derivative</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">derivatives</span><span class="p">,</span> <span class="n">derivatives</span><span class="p">[</span><span class="mi">1</span><span class="p">::]):</span>
	<span class="c1"># I had hundreds of data points</span>
	<span class="bp">self</span><span class="o">.</span><span class="n">play</span><span class="p">(</span><span class="n">ReplacementTransform</span><span class="p">(</span><span class="n">derivative</span><span class="p">,</span> <span class="n">next_derivative</span><span class="p">),</span> <span class="n">run_time</span><span class="o">=</span><span class="mf">0.0002</span><span class="p">)</span>
</code></pre></div><p><img src="/tangent.gif" alt="A gif from my video"></p>
<h2 id="area-under-the-data-point-curve">Area under the data point curve</h2>
<p>Similarly to the tangent lines, area under the curve <a href="https://github.com/3b1b/manim/blob/a529a59abf1f6af02e664dbad1c8474f3a25a61e/manimlib/scene/graph_scene.py#L413">is possible</a>, but <a href="https://github.com/3b1b/manim/blob/a529a59abf1f6af02e664dbad1c8474f3a25a61e/from_3b1b/old/eoc/chapter1.py#L1990">only for native graphs</a>.</p>
<p>My hack around this was to just draw a bunch of lines from the x-axis to the points.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">auc</span> <span class="o">=</span> <span class="n">VGroup</span><span class="p">(</span><span class="o">*</span><span class="p">[</span><span class="n">Line</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">coords_to_point</span><span class="p">(</span><span class="n">coord</span><span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">],</span> <span class="mi">0</span><span class="p">),</span> <span class="bp">self</span><span class="o">.</span><span class="n">coords_to_point</span><span class="p">(</span><span class="n">coord</span><span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">],</span> <span class="n">coord</span><span class="p">[</span><span class="s1">&#39;y&#39;</span><span class="p">]))</span><span class="o">.</span><span class="n">set_stroke</span><span class="p">(</span><span class="n">width</span><span class="o">=</span><span class="mi">8</span><span class="p">)</span> <span class="k">for</span> <span class="n">coord</span> <span class="ow">in</span> <span class="n">coords</span><span class="p">])</span>
<span class="bp">self</span><span class="o">.</span><span class="n">play</span><span class="p">(</span><span class="n">Write</span><span class="p">(</span><span class="n">auc</span><span class="p">))</span>
</code></pre></div><p><img src="/auc.gif" alt="Another gif from my video"></p>
<h1 id="some-documentation-i-wish-i-had">Some Documentation I wish I had</h1>
<h2 id="how-points-work">How Points work</h2>
<p>Manim has a class called <code>Point</code> which shows up as arguments for the constructors of geometric figures like <code>Dot</code>, <code>Line</code>, and <code>Arrow</code>. They represent points on the screen. The center of the screen has the alias <code>ORIGIN</code> and you can add unit vectors <code>LEFT</code>, <code>RIGHT</code>, <code>UP</code>, and <code>DOWN</code> to create any point on the screen.</p>
<p>You can also get the center of an <code>Mobject</code> by calling <code>obj.get_center()</code>.</p>
<p>Internally, these points are represented as an <code>[x, y, z]</code> coordinate array. So <code>ORIGIN</code> is just <code>[0.0, 0.0, 0.0]</code>.</p>
<h2 id="tikz-support">tikz Support</h2>
<p>Manim renders <code>TextMobjects</code> in \(\LaTeX\) by using <code>manim/manimlib/tex_template.tex</code>. Notably, the preamble of this document doesn&rsquo;t include <code>tikz</code>, so if you want to use <code>tikz</code>, you should add</p>
<pre><code>\usepackage{tikz}
\usetikzlibrary{positioning}
</code></pre><p>to the preamble.</p>
<p>To prevent automatic filling-in of rectangles and other figures in a <code>tikzpicture</code>, I found this configuration useful.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">TikzMobject</span><span class="p">(</span><span class="n">TextMobject</span><span class="p">):</span>
	<span class="n">CONFIG</span> <span class="o">=</span> <span class="p">{</span>
		<span class="s2">&#34;stroke_width&#34;</span><span class="p">:</span>	  <span class="mi">3</span><span class="p">,</span>
		<span class="s2">&#34;fill_opacity&#34;</span><span class="p">:</span>	  <span class="mi">0</span><span class="p">,</span>
		<span class="s2">&#34;stroke_opacity&#34;</span><span class="p">:</span> <span class="mi">1</span>
	<span class="p">}</span>
</code></pre></div><p><img src="/tikz.png" alt="A screenshot from my video"></p>
<p>The above figure can be animated with the following code:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">fig</span> <span class="o">=</span> <span class="n">TikzMobject</span><span class="p">(</span>
	<span class="sa">r</span><span class="s2">&#34;&#34;&#34;
</span><span class="s2">            \begin{tikzpicture}[
</span><span class="s2">                circlenode/.style={circle, draw},
</span><span class="s2">                rectanglenode/.style={rectangle, draw, minimum width=2em},
</span><span class="s2">                wheelnode/.style={circle, draw, minimum size=1.5em}
</span><span class="s2">            ]
</span><span class="s2">                \node[circlenode] at (-0.25,0) {};
</span><span class="s2">                \draw (-0.25,0)--(0,-4);
</span><span class="s2">                \node[rectanglenode] at (0,-4) {};
</span><span class="s2">                \node[wheelnode] at (0.5,-4) {};
</span><span class="s2">                \node[wheelnode] at (-0.5, -4) {};
</span><span class="s2">            \end{tikzpicture}
</span><span class="s2">	&#34;&#34;&#34;</span>
<span class="p">)</span>
<span class="bp">self</span><span class="o">.</span><span class="n">play</span><span class="p">(</span><span class="n">Write</span><span class="p">(</span><span class="n">fig</span><span class="p">))</span>
</code></pre></div><h1 id="closing-thoughts">Closing thoughts</h1>
<p>I found looking through the source code and <a href="https://github.com/3b1b/manim/tree/a529a59abf1f6af02e664dbad1c8474f3a25a61e/from_3b1b">how Grant himself used Manim</a> to be a decent alternative to documentation.</p>
<p>I&rsquo;m excited because there are <a href="https://github.com/eulertour/eulerv2">ongoing efforts to make Manim web-compatible</a>. The combination of this and better documentation should make for more amazing math videos and other educational visualizations.</p>
<p>My entry for BJC 2020 wasn&rsquo;t the best, but it gave me an excuse to learn Manim and video editing with <a href="https://www.blackmagicdesign.com/products/davinciresolve/">DaVinci Resolve</a>! The effort to production value ratio is really high for both of these tools.</p>
<p>Now I need an excuse to evaluate some presentation/slidedeck tools for this ratio. Would the winner be <a href="https://www.overleaf.com/learn/latex/Beamer">Beamer</a>, <a href="https://revealjs.com/">reveal.js</a>, or <a href="https://impress.js.org/">impress.js</a>?</p>
]]></content>
		</item>
		
		<item>
			<title>A Segue from Segways</title>
			<link>https://nathanielbd.github.io/posts/segue-from-segways/</link>
			<pubDate>Wed, 17 Jun 2020 17:17:48 -0500</pubDate>
			
			<guid>https://nathanielbd.github.io/posts/segue-from-segways/</guid>
			<description>This content was created as part of an educational workshop for SASE Labs UMN, of which I served as director from 2020-2021. Check out the demo here.
Introduction         Polizei make Segways go brrr    Segways are pretty cool, and they can be the perfect segue into talking about control theory.
Segways need a robust mechanism for correcting itself in order to self-balance.</description>
			<content type="html"><![CDATA[<p><em>This content was created as part of an <a href="https://github.com/SASE-Labs-2021/inverted-pendulum">educational workshop</a> for <a href="https://saseumn.org">SASE Labs UMN</a>, of which I served as director from 2020-2021. Check out the demo <a href="https://SASE-Labs-2021.github.io/inverted-pendulum">here</a>.</em></p>
<h1 id="introduction">Introduction</h1>
<table>
<thead>
<tr>
<th align="center"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/94/Segway_Polizei_4.jpg/1024px-Segway_Polizei_4.jpg" alt="Polizei make Segways go brrr"></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><em>Polizei make Segways go brrr</em></td>
</tr>
</tbody>
</table>
<p>Segways are pretty cool, and they can be the perfect segue into talking about control theory.</p>
<p>Segways need a robust mechanism for correcting itself in order to self-balance. This mechanism needs to be properly tuned and engineered so that it corrects without overshooting, delaying, or being unstable. Control theory is the study of these mechanisms.</p>
<p>Other examples of control systems are cruise control, process control, and thermostats.</p>
<h1 id="the-inverted-pendulum">The Inverted Pendulum</h1>
<p>A classic system on which to test controllers is the &ldquo;inverted pendulum.&rdquo; It&rsquo;s what you might call the &ldquo;Hello World of control systems&rdquo; and it&rsquo;s very similar to the Segway.</p>
<table>
<thead>
<tr>
<th align="center"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/98/Balancer_with_wine_3.JPG/390px-Balancer_with_wine_3.JPG" alt="An inverted pendulum"></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><em>An inverted pendulum</em></td>
</tr>
</tbody>
</table>
<p>The inverted pendulum consists of a mass suspended above a pivot point. The control system must measure the angle of the pivot and move under the center of mass before the pendulum can topple down to the floor.</p>
<h1 id="the-math">The Math</h1>
<p>The output of the control system (rotating the wheels of the cart in the case of the inverted pendulum) can be described as a function.</p>
<p>$$u(t) = K_p e(t) + K_i \int_0^t e(\tau)d\tau + K_d \frac{de(t)}{dt}$$</p>
<p>where</p>
<p>\(t\) is the current time,</p>
<p>\(u(t)\) is the output,</p>
<p>\(K_p\) is our tuning parameter for the proportional term,</p>
<p>\(K_i\) is our tuning parameter for the integral term,</p>
<p>\(K_d\) is our tuning parameter for the derivative term,</p>
<p>\(e(t)\) is the error over time,</p>
<p>\(\tau\) is the variable of integration which ranges from 0 to \(t\).</p>
<p>It looks intimidating, but remember that we will have a sensor which will give us the variable to control (angle of the pendulum) in regular intervals of length \(\Delta t\). This will simplify things so that our final algorithm will just be computing secant lines and Riemann sums with rectangles of width \(\Delta t\).</p>
<h1 id="the-algorithm">The Algorithm</h1>
<p>In pseudocode, the algorithm reduces to:</p>
<pre><code>previous_error := 0
integral := 0

while TRUE
	error := setpoint - measured_value
	integral := integral + error*dt
	derivative := (error - previous_error)/dt
	output := Kp*error + Ki*integral + Kd*derivative
	previous_error := error
	sleep(dt)
end while
</code></pre><p>In the case of the inverted pendulum. The setpoint will be 90 degrees or \(\frac{\pi}{2}\) radians because that is the pivot angle we define to have 0 error.</p>
<p>As you can see, the integral is computed with a left Riemann sum as the rectangles start at the first error measurement.</p>
<table>
<thead>
<tr>
<th align="center"><img src="https://upload.wikimedia.org/wikipedia/commons/1/19/Riemann_sum_%28leftbox%29.gif" alt="A left Riemann sum for varying values of delta t"></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><em>A left Riemann sum for varying values of \(\Delta t\)</em></td>
</tr>
</tbody>
</table>
<p>When we increase our value of \(K_i\), the cart holding the pendulum will move quicker proportional to the accumulated error represented by the area colored in green.</p>
<p>For each measurement \(e(t)\) we take, we approximate the derivative by computing the slope of the secant line:</p>
<p>$$\frac{e(t) - e(t - \Delta t)}{\Delta t}$$</p>
<table>
<thead>
<tr>
<th align="center"><img src="/secant.png" alt="I had secant thoughts spending this long making a figure in tikz"></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><em>A secant line</em></td>
</tr>
</tbody>
</table>
<p>When we increase our value of \(K_d\), the cart will move quicker proportional to the rate of change of the error represented by the slope of the secant curve.</p>
<h1 id="tuning">Tuning</h1>
<p>Once we&rsquo;ve programmed our cart with the PID algorithm, we still need to choose values of \(K_p\), \(K_i\), and \(K_d\) that will balance the pendulum quickly without overshooting or being unstable.</p>
<table>
<thead>
<tr>
<th align="center"><img src="https://upload.wikimedia.org/wikipedia/commons/3/33/PID_Compensation_Animated.gif" alt="Wikipedia has a good animation on tuning a PID"></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><em>Wikipedia has a good animation on tuning a PID</em></td>
</tr>
</tbody>
</table>
<p>The above example shows the tuning process for maintaining a setpoint of 1. It shows how increasing \(K_p\) can decrease the rise time, but lead to overshooting the setpoint. Increasing \(K_i\) will shift the steady-state to the setpoint. Finally, increaseing \(K_d\) will provide stability.</p>
<p>Given our mathematical intuition relating the integral to accumulated error and the derivative to the rate of change of the error, we can come up with these general rules:</p>
<h2 id="what-happens-when-we-increase-">What happens when we increase &hellip;?</h2>
<table>
<thead>
<tr>
<th align="center">Parameter</th>
<th align="center">Rise time</th>
<th align="center">Overshoot</th>
<th align="center">Settling time</th>
<th align="center">Steady-state error</th>
<th align="center">Stability</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">\(K_p\)</td>
<td align="center">Decrease</td>
<td align="center">Increase</td>
<td align="center">Little change</td>
<td align="center">Decrease</td>
<td align="center">Decrease</td>
</tr>
<tr>
<td align="center">\(K_i\)</td>
<td align="center">Decrease</td>
<td align="center">Increase</td>
<td align="center">Increase</td>
<td align="center">Eliminate</td>
<td align="center">Decrease</td>
</tr>
<tr>
<td align="center">\(K_d\)</td>
<td align="center">Little change</td>
<td align="center">Decrease</td>
<td align="center">Decrease</td>
<td align="center">Little change</td>
<td align="center">Increase</td>
</tr>
</tbody>
</table>
<h1 id="trying-it-out">Trying it out</h1>
<p>Now that we know about the tuning process, let&rsquo;s <a href="https://SASE-Labs-2021.github.io/inverted-pendulum">tune a PID on a cart-and-pole simulation</a>.</p>
<table>
<thead>
<tr>
<th align="center"><img src="/inverted-pendulum.gif" alt="Happy tuning!"></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><em>Happy tuning!</em></td>
</tr>
</tbody>
</table>
<p>After tuning, you can share the url in the address bar and anyone can see your personally hand-tuned PID-controlled inverted pendulum!</p>
<h1 id="next-steps">Next steps</h1>
<ul>
<li>Never look at Segways in the same way again</li>
<li>Share your very own PID!</li>
<li>Look at the <a href="https://github.com/SASE-Labs-2021/inverted-pendulum">source code</a></li>
<li>Appreciate steering wheels and thermostats a little more</li>
<li>Try applying reinforcement learning or genetic algorithms to the inverted pendulum problem:</li>
</ul>
<table>
<thead>
<tr>
<th align="center"><img src="https://upload.wikimedia.org/wikipedia/commons/9/93/Cart-pole_swing_up.gif" alt="Can you teach a computer to do this?"></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><em>Can you teach a computer to do this?</em></td>
</tr>
</tbody>
</table>
]]></content>
		</item>
		
	</channel>
</rss>
