<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on nathanielbd</title>
		<link>https://nathanielbd.github.io/posts/</link>
		<description>Recent content in Posts on nathanielbd</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Fri, 26 Jun 2020 16:04:16 -0500</lastBuildDate>
		<atom:link href="https://nathanielbd.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>How I used Manim with WSL and data points</title>
			<link>https://nathanielbd.github.io/posts/manim-in-wsl-with-data/</link>
			<pubDate>Fri, 26 Jun 2020 16:04:16 -0500</pubDate>
			
			<guid>https://nathanielbd.github.io/posts/manim-in-wsl-with-data/</guid>
			<description>I recently (last night) submitted my video entry for the Breakthrough Junior Challenge 2020, a competition for students aged 13-18 to submit a video explaining a topic in physics, life sciences, or math in a 3 minute video. In a competition filled with entries with amazing Adobe After Effects and Element 3D editors, I sought to be unique among the 10,000 competitors by using Grant Sanderson/3Blue1Brown&amp;rsquo;s math animation engine, Manim. The source code for my video can be found here.</description>
			<content type="html"><![CDATA[<p>I recently (last night) submitted <a href="https://www.youtube.com/watch?v=ixGwH2oYzzA">my video entry</a> for <a href="https://breakthroughjuniorchallenge.org/">the Breakthrough Junior Challenge 2020</a>, a competition for students aged 13-18 to submit a video explaining a topic in physics, life sciences, or math in a 3 minute video. In a competition filled with entries with amazing Adobe After Effects and Element 3D editors, I sought to be unique among the 10,000 competitors by using Grant Sanderson/3Blue1Brown&rsquo;s math animation engine, <a href="https://github.com/3b1b/manim">Manim</a>. The source code for my video can be found <a href="https://github.com/nathanielbd/bjc2020">here</a>.</p>
<p><img src="https://raw.githubusercontent.com/3b1b/manim/master/logo/cropped.png" alt="Manim logo"></p>
<p>The engine is incredible, but lacks documentation and tutorials. There are a couple good ones that show up when you search &ldquo;manim tutorial&rdquo;, like <a href="https://github.com/Elteoremadebeethoven/AnimationsWithManim">this</a>, <a href="https://github.com/malhotra5/Manim-Tutorial">this</a>, and <a href="https://github.com/saturnman/manim_turorial">this</a>. However, nothing relevant shows up when you search &ldquo;manim WSL&rdquo; or &ldquo;manim data points,&rdquo; so I think that alone justifies making this post.</p>
<h1 id="my-ramblings-on-wsl">My ramblings on WSL</h1>
<p>Feel free to skip this if you&rsquo;re familiar with WSL, but it&rsquo;s greatly improved my software development experience so I thought I&rsquo;d share my thoughts and setup if it&rsquo;d be able to help some people, even if I&rsquo;m not sponsored to do that.</p>
<p>WSL stands for &ldquo;Windows Subsystem for Linux.&rdquo; It allows developers to run a Linux environment on their Windows computer. You can run your favorite distro. It comes with Bash. Perhaps its best perk is giving Windows users access to all the installers and package managers that are so convenient on Linux.</p>
<p>WSL requires an X server to run GUI applications. The one I use and love is <a href="https://mobaxterm.mobatek.net/">MobaXterm</a>. It runs smoothly, has tabs for multiple terminals, pretty colors, and even works over SSH. Personally, I&rsquo;m really happy with my VSCodium/MobaXterm/Vim setup. After switching from Cygwin, PuTTY, and <a href="https://vole.cse.umn.edu/">my university&rsquo;s online Linux desktop</a>, I&rsquo;ve never looked back.</p>
<table>
<thead>
<tr>
<th align="center"><img src="/mobaxterm.png" alt="MobaXTerm"></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">MobaXTerm with X server displaying a pdf using <a href="https://pwmt.org/projects/zathura/">Zathura</a></td>
</tr>
</tbody>
</table>
<h1 id="how-to-install-manim-on-wsl">How to install Manim on WSL</h1>
<p>Manim uses <a href="https://miktex.org">MiKTeX</a> to handle \(\LaTeX\). I followed the intructions <a href="https://miktex.org/howto/install-miktex-unx">here</a> to install.</p>
<p>Next, install dependencies.</p>
<pre><code># install dependencies in Ubuntu
sudo apt install pkg-config libcairo2-dev ffmpeg sox texlive

# install required latex packages
sudo apt install texlive-latex-extra    # &quot;standalone&quot;
sudo apt install texlive-fonts-extra    # &quot;dsfont&quot;
sudo apt install texlive-science        # &quot;physics&quot;
</code></pre><p>Clone Manim from GitHub, create an Anaconda environment, and install the requirements.</p>
<pre><code># install manim
git clone https://github.com/3b1b/manim.git
cd manim
# create Anaconda env
conda env create -f environment.yml
conda activate manim
python3 -m pip install -r requirements.txt
</code></pre><p>Test it out. This must be done in the <code>manim</code> directory.</p>
<pre><code>python3 -m manim example_scenes.py SquareToCircle -pl
</code></pre><p><em>NOTE:</em> the <code>-pl</code> tag means the preview the video by opening it and render it in low quality.</p>
<h1 id="how-to-graph-data-points">How to graph data points</h1>
<p>Use a <code>GraphScene</code> and set its configuration. These are the defaults.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">manimlib.imports</span> <span class="kn">import</span> <span class="o">*</span>

<span class="k">class</span> <span class="nc">YourScene</span><span class="p">(</span><span class="n">GraphScene</span><span class="p">):</span>
	<span class="n">CONFIG</span> <span class="o">=</span> <span class="p">{</span>
	    <span class="s2">&#34;x_min&#34;</span><span class="p">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span>
	    <span class="s2">&#34;x_max&#34;</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
	    <span class="s2">&#34;x_axis_width&#34;</span><span class="p">:</span> <span class="mi">9</span><span class="p">,</span>
	    <span class="s2">&#34;x_tick_frequency&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
	    <span class="s2">&#34;x_leftmost_tick&#34;</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span> <span class="c1"># Change if different from x_min</span>
	    <span class="s2">&#34;x_labeled_nums&#34;</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
	    <span class="s2">&#34;x_axis_label&#34;</span><span class="p">:</span> <span class="s2">&#34;$x$&#34;</span><span class="p">,</span>
	    <span class="s2">&#34;y_min&#34;</span><span class="p">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span>
	    <span class="s2">&#34;y_max&#34;</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
	    <span class="s2">&#34;y_axis_height&#34;</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span>
	    <span class="s2">&#34;y_tick_frequency&#34;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
	    <span class="s2">&#34;y_bottom_tick&#34;</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span> <span class="c1"># Change if different from y_min</span>
	    <span class="s2">&#34;y_labeled_nums&#34;</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
	    <span class="s2">&#34;y_axis_label&#34;</span><span class="p">:</span> <span class="s2">&#34;$y$&#34;</span><span class="p">,</span>
	    <span class="s2">&#34;axes_color&#34;</span><span class="p">:</span> <span class="n">GREY</span><span class="p">,</span>
	    <span class="s2">&#34;graph_origin&#34;</span><span class="p">:</span> <span class="mf">2.5</span> <span class="o">*</span> <span class="n">DOWN</span> <span class="o">+</span> <span class="mi">4</span> <span class="o">*</span> <span class="n">LEFT</span><span class="p">,</span>
	    <span class="s2">&#34;exclude_zero_label&#34;</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span>
	    <span class="s2">&#34;num_graph_anchor_points&#34;</span><span class="p">:</span> <span class="mi">25</span><span class="p">,</span>
	    <span class="s2">&#34;default_graph_colors&#34;</span><span class="p">:</span> <span class="p">[</span><span class="n">BLUE</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">YELLOW</span><span class="p">],</span>
	    <span class="s2">&#34;default_derivative_color&#34;</span><span class="p">:</span> <span class="n">GREEN</span><span class="p">,</span>
	    <span class="s2">&#34;default_input_color&#34;</span><span class="p">:</span> <span class="n">YELLOW</span><span class="p">,</span>
	    <span class="s2">&#34;default_riemann_start_color&#34;</span><span class="p">:</span> <span class="n">BLUE</span><span class="p">,</span>
	    <span class="s2">&#34;default_riemann_end_color&#34;</span><span class="p">:</span> <span class="n">GREEN</span><span class="p">,</span>
	    <span class="s2">&#34;area_opacity&#34;</span><span class="p">:</span> <span class="mf">0.8</span><span class="p">,</span>
	    <span class="s2">&#34;num_rects&#34;</span><span class="p">:</span> <span class="mi">50</span>
	<span class="p">}</span>
</code></pre></div><p>Draw the axis.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">construct</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
	<span class="bp">self</span><span class="o">.</span><span class="n">setup_axes</span><span class="p">(</span><span class="n">animate</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div><p>This example uses JSON like <code>[{&quot;x&quot;:0, &quot;y&quot;:1}, ..., {&quot;x&quot;:9, &quot;y&quot;:10}]</code>, but you can extract your data using any method as long as it is supported in python.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">json</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;file.json&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">json_file</span>
	<span class="n">coords</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">json_file</span><span class="p">)</span>
<span class="n">data_points</span> <span class="o">=</span> <span class="n">VGroup</span><span class="p">(</span><span class="o">*</span><span class="p">[</span><span class="n">Dot</span><span class="p">(</span><span class="n">point</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">coords_to_point</span><span class="p">(</span><span class="n">coord</span><span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">],</span><span class="n">coord</span><span class="p">[</span><span class="s1">&#39;y&#39;</span><span class="p">),</span> <span class="n">radius</span><span class="o">=</span><span class="mf">0.3</span><span class="p">)</span> <span class="k">for</span> <span class="n">coord</span> <span class="ow">in</span> <span class="n">coords</span><span class="p">])</span>
<span class="bp">self</span><span class="o">.</span><span class="n">play</span><span class="p">(</span><span class="n">Write</span><span class="p">(</span><span class="n">dots</span><span class="p">),</span> <span class="n">run_time</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div><p><img src="/graph.png" alt="A screenshot from my video"></p>
<h2 id="tangent-lines-to-data-points">Tangent lines to data points</h2>
<p>Manim has <a href="https://github.com/3b1b/manim/blob/a529a59abf1f6af02e664dbad1c8474f3a25a61e/manimlib/scene/graph_scene.py#L715">really neat functions</a> for <a href="https://github.com/3b1b/manim/blob/a529a59abf1f6af02e664dbad1c8474f3a25a61e/manimlib/scene/graph_scene.py#L988">plotting tangent lines</a> to <a href="https://github.com/3b1b/manim/blob/839fb4ff582103bd717b9d7937c926ef0390fb01/from_3b1b/old/eoc/chapter9.py#L1080">visualize derivaties</a>, but they only work for graphs created from <code>GraphScene.get_graph</code>. In other words, there is no official support for tangent line plotting for our data points.</p>
<p>My hack around this was to enumerate the graphs of the instantaneous slopes using the slope intercept form of the <a href="https://en.wikipedia.org/wiki/Numerical_differentiation#Finite_differences">secant line for numerical differentiation</a>.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">derivatives</span> <span class="o">=</span> <span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">get_graph</span><span class="p">(</span>
	<span class="c1"># slope intercept form is ugly as a one-liner lambda func</span>
	<span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">((</span><span class="n">coords</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s1">&#39;y&#39;</span><span class="p">]</span><span class="o">-</span><span class="n">coords</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="s1">&#39;y&#39;</span><span class="p">])</span><span class="o">/</span><span class="p">(</span><span class="n">coords</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s1">&#39;x&#39;</span><span class="p">]</span><span class="o">-</span><span class="n">coords</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="s1">&#39;x&#39;</span><span class="p">]))</span><span class="o">*</span><span class="n">x</span><span class="o">+</span><span class="p">(</span><span class="n">coords</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="s1">&#39;y&#39;</span><span class="p">]</span><span class="o">-</span><span class="n">coords</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="s1">&#39;x&#39;</span><span class="p">]</span><span class="o">*</span><span class="p">((</span><span class="n">coords</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s1">&#39;y&#39;</span><span class="p">]</span><span class="o">-</span><span class="n">coords</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="s1">&#39;y&#39;</span><span class="p">])</span><span class="o">/</span><span class="p">(</span><span class="n">coords</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="s1">&#39;x&#39;</span><span class="p">]</span><span class="o">-</span><span class="n">coords</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="s1">&#39;x&#39;</span><span class="p">]))),</span>
	<span class="n">PURPLE</span>
<span class="c1"># start from index 1 so since computing slope requires the previous point</span>
<span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">data_points</span><span class="p">)]</span>
<span class="k">for</span> <span class="n">derivative</span><span class="p">,</span> <span class="n">next_derivative</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">derivatives</span><span class="p">,</span> <span class="n">derivatives</span><span class="p">[</span><span class="mi">1</span><span class="p">::]):</span>
	<span class="c1"># I had hundreds of data points</span>
	<span class="bp">self</span><span class="o">.</span><span class="n">play</span><span class="p">(</span><span class="n">ReplacementTransform</span><span class="p">(</span><span class="n">derivative</span><span class="p">,</span> <span class="n">next_derivative</span><span class="p">),</span> <span class="n">run_time</span><span class="o">=</span><span class="mf">0.0002</span><span class="p">)</span>
</code></pre></div><p><img src="/tangent.gif" alt="A gif from my video"></p>
<h2 id="area-under-the-data-point-curve">Area under the data point curve</h2>
<p>Similarly to the tangent lines, area under the curve <a href="https://github.com/3b1b/manim/blob/a529a59abf1f6af02e664dbad1c8474f3a25a61e/manimlib/scene/graph_scene.py#L413">is possible</a>, but <a href="https://github.com/3b1b/manim/blob/a529a59abf1f6af02e664dbad1c8474f3a25a61e/from_3b1b/old/eoc/chapter1.py#L1990">only for native graphs</a>.</p>
<p>My hack around this was to just draw a bunch of lines from the x-axis to the points.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">auc</span> <span class="o">=</span> <span class="n">VGroup</span><span class="p">(</span><span class="o">*</span><span class="p">[</span><span class="n">Line</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">coords_to_point</span><span class="p">(</span><span class="n">coord</span><span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">],</span> <span class="mi">0</span><span class="p">),</span> <span class="bp">self</span><span class="o">.</span><span class="n">coords_to_point</span><span class="p">(</span><span class="n">coord</span><span class="p">[</span><span class="s1">&#39;x&#39;</span><span class="p">],</span> <span class="n">coord</span><span class="p">[</span><span class="s1">&#39;y&#39;</span><span class="p">]))</span><span class="o">.</span><span class="n">set_stroke</span><span class="p">(</span><span class="n">width</span><span class="o">=</span><span class="mi">8</span><span class="p">)</span> <span class="k">for</span> <span class="n">coord</span> <span class="ow">in</span> <span class="n">coords</span><span class="p">])</span>
<span class="bp">self</span><span class="o">.</span><span class="n">play</span><span class="p">(</span><span class="n">Write</span><span class="p">(</span><span class="n">auc</span><span class="p">))</span>
</code></pre></div><p><img src="/auc.gif" alt="Another gif from my video"></p>
<h1 id="some-documentation-i-wish-i-had">Some Documentation I wish I had</h1>
<h2 id="how-points-work">How Points work</h2>
<p>Manim has a class called <code>Point</code> which shows up as arguments for the constructors of geometric figures like <code>Dot</code>, <code>Line</code>, and <code>Arrow</code>. They represent points on the screen. The center of the screen has the alias <code>ORIGIN</code> and you can add unit vectors <code>LEFT</code>, <code>RIGHT</code>, <code>UP</code>, and <code>DOWN</code> to create any point on the screen.</p>
<p>You can also get the center of an <code>Mobject</code> by calling <code>obj.get_center()</code>.</p>
<p>Internally, these points are represented as an <code>[x, y, z]</code> coordinate array. So <code>ORIGIN</code> is just <code>[0.0, 0.0, 0.0]</code>.</p>
<h2 id="tikz-support">tikz Support</h2>
<p>Manim renders <code>TextMobjects</code> in \(\LaTeX\) by using <code>manim/manimlib/tex_template.tex</code>. Notably, the preamble of this document doesn&rsquo;t include <code>tikz</code>, so if you want to use <code>tikz</code>, you should add</p>
<pre><code>\usepackage{tikz}
\usetikzlibrary{positioning}
</code></pre><p>to the preamble.</p>
<p>To prevent automatic filling-in of rectangles and other figures in a <code>tikzpicture</code>, I found this configuration useful.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">TikzMobject</span><span class="p">(</span><span class="n">TextMobject</span><span class="p">):</span>
	<span class="n">CONFIG</span> <span class="o">=</span> <span class="p">{</span>
		<span class="s2">&#34;stroke_width&#34;</span><span class="p">:</span>	  <span class="mi">3</span><span class="p">,</span>
		<span class="s2">&#34;fill_opacity&#34;</span><span class="p">:</span>	  <span class="mi">0</span><span class="p">,</span>
		<span class="s2">&#34;stroke_opacity&#34;</span><span class="p">:</span> <span class="mi">1</span>
	<span class="p">}</span>
</code></pre></div><p><img src="/tikz.png" alt="A screenshot from my video"></p>
<p>The above figure can be animated with the following code:</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="n">fig</span> <span class="o">=</span> <span class="n">TikzMobject</span><span class="p">(</span>
	<span class="sa">r</span><span class="s2">&#34;&#34;&#34;
</span><span class="s2">            \begin{tikzpicture}[
</span><span class="s2">                circlenode/.style={circle, draw},
</span><span class="s2">                rectanglenode/.style={rectangle, draw, minimum width=2em},
</span><span class="s2">                wheelnode/.style={circle, draw, minimum size=1.5em}
</span><span class="s2">            ]
</span><span class="s2">                \node[circlenode] at (-0.25,0) {};
</span><span class="s2">                \draw (-0.25,0)--(0,-4);
</span><span class="s2">                \node[rectanglenode] at (0,-4) {};
</span><span class="s2">                \node[wheelnode] at (0.5,-4) {};
</span><span class="s2">                \node[wheelnode] at (-0.5, -4) {};
</span><span class="s2">            \end{tikzpicture}
</span><span class="s2">	&#34;&#34;&#34;</span>
<span class="p">)</span>
<span class="bp">self</span><span class="o">.</span><span class="n">play</span><span class="p">(</span><span class="n">Write</span><span class="p">(</span><span class="n">fig</span><span class="p">))</span>
</code></pre></div><h1 id="closing-thoughts">Closing thoughts</h1>
<p>I found looking through the source code and <a href="https://github.com/3b1b/manim/tree/a529a59abf1f6af02e664dbad1c8474f3a25a61e/from_3b1b">how Grant himself used Manim</a> to be a decent alternative to documentation.</p>
<p>I&rsquo;m excited because there are <a href="https://github.com/eulertour/eulerv2">ongoing efforts to make Manim web-compatible</a>. The combination of this and better documentation should make for more amazing math videos and other educational visualizations.</p>
<p>My entry for BJC 2020 wasn&rsquo;t the best, but it gave me an excuse to learn Manim and video editing with <a href="https://www.blackmagicdesign.com/products/davinciresolve/">DaVinci Resolve</a>! The effort to production value ratio is really high for both of these tools.</p>
<p>Now I need an excuse to evaluate some presentation/slidedeck tools for this ratio. Would the winner be <a href="https://www.overleaf.com/learn/latex/Beamer">Beamer</a>, <a href="https://revealjs.com/">reveal.js</a>, or <a href="https://impress.js.org/">impress.js</a>?</p>
]]></content>
		</item>
		
		<item>
			<title>A Segue from Segways</title>
			<link>https://nathanielbd.github.io/posts/segue-from-segways/</link>
			<pubDate>Wed, 17 Jun 2020 17:17:48 -0500</pubDate>
			
			<guid>https://nathanielbd.github.io/posts/segue-from-segways/</guid>
			<description>This content was created as part of an educational workshop for SASE Labs UMN, of which I served as director from 2020-2021. Check out the demo here.
Introduction         Polizei make Segways go brrr    Segways are pretty cool, and they can be the perfect segue into talking about control theory.
Segways need a robust mechanism for correcting itself in order to self-balance.</description>
			<content type="html"><![CDATA[<p><em>This content was created as part of an <a href="https://github.com/SASE-Labs-2021/inverted-pendulum">educational workshop</a> for <a href="https://saseumn.org">SASE Labs UMN</a>, of which I served as director from 2020-2021. Check out the demo <a href="https://SASE-Labs-2021.github.io/inverted-pendulum">here</a>.</em></p>
<h1 id="introduction">Introduction</h1>
<table>
<thead>
<tr>
<th align="center"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/94/Segway_Polizei_4.jpg/1024px-Segway_Polizei_4.jpg" alt="Polizei make Segways go brrr"></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><em>Polizei make Segways go brrr</em></td>
</tr>
</tbody>
</table>
<p>Segways are pretty cool, and they can be the perfect segue into talking about control theory.</p>
<p>Segways need a robust mechanism for correcting itself in order to self-balance. This mechanism needs to be properly tuned and engineered so that it corrects without overshooting, delaying, or being unstable. Control theory is the study of these mechanisms.</p>
<p>Other examples of control systems are cruise control, process control, and thermostats.</p>
<h1 id="the-inverted-pendulum">The Inverted Pendulum</h1>
<p>A classic system on which to test controllers is the &ldquo;inverted pendulum.&rdquo; It&rsquo;s what you might call the &ldquo;Hello World of control systems&rdquo; and it&rsquo;s very similar to the Segway.</p>
<table>
<thead>
<tr>
<th align="center"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/98/Balancer_with_wine_3.JPG/390px-Balancer_with_wine_3.JPG" alt="An inverted pendulum"></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><em>An inverted pendulum</em></td>
</tr>
</tbody>
</table>
<p>The inverted pendulum consists of a mass suspended above a pivot point. The control system must measure the angle of the pivot and move under the center of mass before the pendulum can topple down to the floor.</p>
<h1 id="the-math">The Math</h1>
<p>The output of the control system (rotating the wheels of the cart in the case of the inverted pendulum) can be described as a function.</p>
<p>$$u(t) = K_p e(t) + K_i \int_0^t e(\tau)d\tau + K_d \frac{de(t)}{dt}$$</p>
<p>where</p>
<p>\(t\) is the current time,</p>
<p>\(u(t)\) is the output,</p>
<p>\(K_p\) is our tuning parameter for the proportional term,</p>
<p>\(K_i\) is our tuning parameter for the integral term,</p>
<p>\(K_d\) is our tuning parameter for the derivative term,</p>
<p>\(e(t)\) is the error over time,</p>
<p>\(\tau\) is the variable of integration which ranges from 0 to \(t\).</p>
<p>It looks intimidating, but remember that we will have a sensor which will give us the variable to control (angle of the pendulum) in regular intervals of length \(\Delta t\). This will simplify things so that our final algorithm will just be computing secant lines and Riemann sums with rectangles of width \(\Delta t\).</p>
<h1 id="the-algorithm">The Algorithm</h1>
<p>In pseudocode, the algorithm reduces to:</p>
<pre><code>previous_error := 0
integral := 0

while TRUE
	error := setpoint - measured_value
	integral := integral + error*dt
	derivative := (error - previous_error)/dt
	output := Kp*error + Ki*integral + Kd*derivative
	previous_error := error
	sleep(dt)
end while
</code></pre><p>In the case of the inverted pendulum. The setpoint will be 90 degrees or \(\frac{\pi}{2}\) radians because that is the pivot angle we define to have 0 error.</p>
<p>As you can see, the integral is computed with a left Riemann sum as the rectangles start at the first error measurement.</p>
<table>
<thead>
<tr>
<th align="center"><img src="https://upload.wikimedia.org/wikipedia/commons/1/19/Riemann_sum_%28leftbox%29.gif" alt="A left Riemann sum for varying values of delta t"></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><em>A left Riemann sum for varying values of \(\Delta t\)</em></td>
</tr>
</tbody>
</table>
<p>When we increase our value of \(K_i\), the cart holding the pendulum will move quicker proportional to the accumulated error represented by the area colored in green.</p>
<p>For each measurement \(e(t)\) we take, we approximate the derivative by computing the slope of the secant line:</p>
<p>$$\frac{e(t) - e(t - \Delta t)}{\Delta t}$$</p>
<table>
<thead>
<tr>
<th align="center"><img src="/secant.png" alt="I had secant thoughts spending this long making a figure in tikz"></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><em>A secant line</em></td>
</tr>
</tbody>
</table>
<p>When we increase our value of \(K_d\), the cart will move quicker proportional to the rate of change of the error represented by the slope of the secant curve.</p>
<h1 id="tuning">Tuning</h1>
<p>Once we&rsquo;ve programmed our cart with the PID algorithm, we still need to choose values of \(K_p\), \(K_i\), and \(K_d\) that will balance the pendulum quickly without overshooting or being unstable.</p>
<table>
<thead>
<tr>
<th align="center"><img src="https://upload.wikimedia.org/wikipedia/commons/3/33/PID_Compensation_Animated.gif" alt="Wikipedia has a good animation on tuning a PID"></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><em>Wikipedia has a good animation on tuning a PID</em></td>
</tr>
</tbody>
</table>
<p>The above example shows the tuning process for maintaining a setpoint of 1. It shows how increasing \(K_p\) can decrease the rise time, but lead to overshooting the setpoint. Increasing \(K_i\) will shift the steady-state to the setpoint. Finally, increaseing \(K_d\) will provide stability.</p>
<p>Given our mathematical intuition relating the integral to accumulated error and the derivative to the rate of change of the error, we can come up with these general rules:</p>
<h2 id="what-happens-when-we-increase-">What happens when we increase &hellip;?</h2>
<table>
<thead>
<tr>
<th align="center">Parameter</th>
<th align="center">Rise time</th>
<th align="center">Overshoot</th>
<th align="center">Settling time</th>
<th align="center">Steady-state error</th>
<th align="center">Stability</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">\(K_p\)</td>
<td align="center">Decrease</td>
<td align="center">Increase</td>
<td align="center">Little change</td>
<td align="center">Decrease</td>
<td align="center">Decrease</td>
</tr>
<tr>
<td align="center">\(K_i\)</td>
<td align="center">Decrease</td>
<td align="center">Increase</td>
<td align="center">Increase</td>
<td align="center">Eliminate</td>
<td align="center">Decrease</td>
</tr>
<tr>
<td align="center">\(K_d\)</td>
<td align="center">Little change</td>
<td align="center">Decrease</td>
<td align="center">Decrease</td>
<td align="center">Little change</td>
<td align="center">Increase</td>
</tr>
</tbody>
</table>
<h1 id="trying-it-out">Trying it out</h1>
<p>Now that we know about the tuning process, let&rsquo;s <a href="https://SASE-Labs-2021.github.io/inverted-pendulum">tune a PID on a cart-and-pole simulation</a>.</p>
<table>
<thead>
<tr>
<th align="center"><img src="/inverted-pendulum.gif" alt="Happy tuning!"></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><em>Happy tuning!</em></td>
</tr>
</tbody>
</table>
<p>After tuning, you can share the url in the address bar and anyone can see your personally hand-tuned PID-controlled inverted pendulum!</p>
<h1 id="next-steps">Next steps</h1>
<ul>
<li>Never look at Segways in the same way again</li>
<li>Share your very own PID!</li>
<li>Look at the <a href="https://github.com/SASE-Labs-2021/inverted-pendulum">source code</a></li>
<li>Appreciate steering wheels and thermostats a little more</li>
<li>Try applying reinforcement learning or genetic algorithms to the inverted pendulum problem:</li>
</ul>
<table>
<thead>
<tr>
<th align="center"><img src="https://upload.wikimedia.org/wikipedia/commons/9/93/Cart-pole_swing_up.gif" alt="Can you teach a computer to do this?"></th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><em>Can you teach a computer to do this?</em></td>
</tr>
</tbody>
</table>
]]></content>
		</item>
		
	</channel>
</rss>
